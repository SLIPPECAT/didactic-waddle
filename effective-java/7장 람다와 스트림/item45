⭐️ 스트림은 주의해서 사용하라

❗️ 뭔가 앞으로 많이 적용할 것 같은 느낌이 드는 아이템!

1️⃣ 개요 : 스트림 API는 다량의 데이터 처리 작업(순차적인든 병렬적인든)을 돕고자 자바 8에 추가되었다. 이 API가 제공하는 추상 개념 중 핵심은 두 가지다.

        스트림 파이프라인은 소스 스트림에서 시작해 종단 연산으로 끝나며, 그 사이에 하나 이상의 중간 연산이 있을 수 있다. 각 중간 연산은 스트림을 어떠한 방식으로 변환한다.
        스트림 파이프라인은 지연 평가된다. 평가는 종단 연산이 호출될 때 이뤄지며, 종단 연산에 쓰이지 않는 데이터 원소는 계산에 쓰이지 않는다.
        이러한 지연 평가가 무한 스트림을 다룰 수 있게 해주는 열쇠다. 종단 연산이 없는 스트림 파이프라인은 아무 일도 하지 않는 명령어인 no-op과 같으니, 종단 연산을 빼먹지 말자.

        스트림 API는 메서드 연쇄를 지원하는 플루언트 API다. 즉, 파이프라인 하나를 구성하는 모든 호출을 연결하여 단 하나의 표현식으로 완성할 수 있다. 파이프라인 여러 개를 연결해
        표현식 하나로 만들 수 있다.

        기본적으로 스트림 파이프라인은 순차적으로 수행된다. 파이프라인은 병렬로 실행하면 파이프라인을 구성하는 스트림 중 하나에서 parallel 메서드를 호출해주기만 하면 되나,
        효과를 볼 수 있는 상황은 많지 않다.

2️⃣ 스트림 API가 제공하는 추상 개념
  1. 스트림은 데이터 원소의 유한 혹은 무한 시퀀스를 뜻한다.
  2. 스트림 파이프라인은 이 원소들로 수행하는 연산 단계를 표현하는 개념이다. (스트림의 원소들은 어디로부터든 올 수 있다.)

3️⃣ 스트림 사용 노하우
  ❗️ 스트림을 과용하면 프로그램이 읽거나 유지보수하기 어려워진다.
  1. computeIfAbsent 메서드 : 맵 안에 키가 있는지 찾은 다음, 있으면 단순히 그 키에 매핑된 값을 반환한다. 키가 없으면 건네진 함수 객체를 키에 적용하여 값을 계산해낸 다음
    그 키와 값을 매핑해놓고, 계산된 값을 반환한다. 이철머 computeIfAbsent를 사용하면 각 키에 다수의 값을 매핑하는 맵을 쉽게 구현할 수 있다.

  2. try-with-resources 블록에서 사전 파일을 열고, 파일을 모든 라인으록 구성된 스트림을 얻는다.
  3. 자바는 기본 타입인 char용 스트림을 지원하지 않는다. char 값들을 처리할 때는 스트림을 삼가는 편이 낫다.
  4. 기존 코드는 스트림을 사용하도록 리팩터링하되, 새 코드가 나아 보일 때만 반영하자.

✔️ 람다 매개변수의 이름은 주의해서 정해야 한다. 람다에서는 타입 이름을 자주 생략하므로 매개변수 이름을 잘 지어야 스트림 파이프라인의 가독성이 유지된다.

4️⃣ 함수 객체로는 할 수 없지만 코드 블록으로는 할 수 있는 일들
  1. 코드 블록에서는 범위 안의 지역변수를 읽고 수정할 수 있다. 하지만 람다에서는 final 이거나 사실상 final이거나 사실상 final인 변수만 읽을 수 있고, 지역변수를 수정하는 건
      불가능하다.
  2. 코드 블록에서는 return 문을 사용해 메서드에서 빠져나가거나, break나 continue 문으로 블록 바깥의 반복문을 종료하거나 반복을 한 번 건너뛸 수 있다. 또한 메서드 선언에
      명시된 검사 예외를 던질 수 있다. 하지만 람다로는 할 수 없다.
  계산 로직에서 이상의 일들을 수행해야 한다면 스트림과는 맞지 않을 것이다.

5️⃣ 스트림에 안성맞춤이 일들
  1. 원소들의 시퀀스를 일관되게 변환한다.
  2. 원소들의 시퀀스를 필터링한다.
  3. 원소들의 시퀀스를 하나의 연산을 사용해 결합한다. (더하기, 연결하기, 최솟값 구하기 등)
  4. 원소들의 시퀀스를 컬렉션에 모은다. (아마도 공통된 속성을 기준으로 묶어가며)
  5. 원소들의 시퀀스에서 특정 조건을 만족하는 원소를 찾는다.
  6. 스트림을 반환하는 메서드 이름은 원소의 정체를 알려주는 복수 명사로 쓰기를 강력히 추천!

6️⃣ 스트림으로 처리하기 어려운 일
  1. 한 데이터가 파이프라인의 여러 단계를 통과할 때 이 데이터의 각 단계에서의 값들에 동시에 접근하기는 어려운 경우. 스트림 파이프라인은 일단 한 값을 다른 값에 매핑하고 나면 원래의 값은 잃는 구조이기 때문이다.

7️⃣ 예제
ex. 20개의 메르센 소수를 출력하는 프로그램
ex. 데카르트 곱 계산을 반복 방식으로 구현

8️⃣ 중간 연산으로 사용한 flatMap은 스트림의 원소 각각을 하나의 스트림으로 매핑한 다음 그 스트림들을 다시 하나의 스트림으로 합친다. 이를 평탄화라고도 한다.

📖 핵심 정리 : 스트림을 사용해야 멋지게 처리할 수 있는 일이 있고, 반복 방식이 더 알맞은 일도 있다. 그리고 수많은 작업이 이 둘을 조합했을 때 가장 멋지게 해결된다. 어느 쪽을 선택하는
            확고부동한 규칙은 없지만 참고할 만한 지침 정도는 있다. 어느 쪽이 나은지가 확연히 드러나는 경우가 많겠지만, 아니더라도 방법은 있다. 스트림과 반복 중 어느 쪽이 나은지
            확신하기 어렵다면 둘 다 해보고 더 나은 쪽을 택하라.
