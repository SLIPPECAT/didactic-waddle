⭐️ 표준 함수형 인터페이스를 사용하라

1️⃣ 개요 : 자바가 람다를 지원하면서 API를 작성하는 모범 사례도 크게 빠귀었다. 예컨대 상위 클래스의 기본 메서드를 재정의해 원하는 동작을 구현하는 템플릿 메서드 패턴의 매력이 크게 줄었다.
        이를 대체하는 현대적인 해법은 같은 효과의 함수 객체를 받는 정적 팩터리나 생성자를 제공하는 것이다. 이 내용을 일반화해서 말하면 함수 객체를 매개변수로 받는 생성자와 메서드를
        더 많이 만들어야 한다. 이때 함수형 매개변수 타입을 올바르게 선택해야 한다.

        protected boolean removeEldestEntry(Map.Entry<K,V> eldest) {
            return size() > 100;
        }

        LinkedHashMap을 오늘날 다시 구현한다면 함수 객체를 보는 정적 팩터리나 생성자를 제공했을 것이다.

        팩터리나 생성자를 호출할 때는 맵의 인스턴스가 존재하지 않는다. 따라서 맵은 자기 자신도 함수 객체에 건네줘야 한다. 이를 반형한 함수형 인터페이스는 다음과 같다.

        // 불필요한 함수형 인터페이스
        @FunctionalInterface interface EldestEntryRemovalFunction<K,V> {
            boolean remove(Map<K,V> map, Map.Entry<K,V> eldest);
        }
      필요한 용도에 맞는 게 있다면, 직접 구현하지 말고 표준 함수형 인터페이스를 활용하라. 

      java.util.function 패키지에는 총 43개의 인터페이스가 담겨 있다. 기본 인터페이스 6개만 기억하면 나머지를 충분히 유추해낼 수 있다. 이 기본 인터페이스들은 모두 참조 타입용이다.

      기본 인터페이스는 기본 타입인 int, long, double용으로 각 3개씩 변형이 생겨난다.
      Function 인터페이스에는 기본 타입을 반환하는 변형이 총 9개 더 있다.
      인수와 같은 타입을 반환하는 함수는 UnaryOperator이므로, Function 인터페이스의 변형은 입력과 결과의 타입이 항상 다르다.
      입력과 결과 타입이 모두 기본 타입이면 접두어로 SrcToResult를 사용한다. long을 받아 int를 반환하면 LongToIntFunction이 되는 식(총 6개)
      나머지는 입력이 객체 참조이고 결과가 int, long, double인 변형들로, 앞서와 달리 입력을 배개변수화하고 접두어로 ToResult를 사용한다.
      즉, ToLongFunction<int[]>은 int[] 인수를 받아 long을 반환한다.(총 3개)

      기본 함수형 인터페이스 중 3개에는 인수를 2개씩 받는 변형이 있다.
      마지막으로, BooleanSupplier 인터페이스는 boolean을 반환하도록 한 Supplier의 변형이다. 이것이 표준 함수형 인터페이스 중 boolean을 이름에 명시한 유일한 인터페이스지만
      Predicate와 그 변형 4개도 boolean 값을 반환할 수 있다.

        표준 함수형 인터페이스 대부분은 기본 타입만 지원한다. 그렇다고 기본 함수 형 인터페이스에 박싱된 기본 타입을 넣어 사용하지는 말자. 동작은 하지만 
        "박싱된 기본 타입 대신 기본 타입을 사용하라" 계산량이 많을 때는 성능이 처참히 느려질 수 있다.

2️⃣ Comparator<T> vs ToIntBiFunction<T,U>, Comparator가 독자적인 인터페이스로 살아남은 이유
  1. 자주 쓰이며, 이름 자체가 용도를 명확히 설명해준다.
  2. 반드시 따라야 하는 규약이 있다.
  3. 유용한 디폴트 메서드를 제공할 수 있다.

  인터페이스를 설계할 때는 주의해서 설계하도록 하자.

3️⃣ @Functional Interface 애너테이션을 사용한 이유
  1. 해당 클래스의 코드나 설명 문서를 읽을 이에게 그 인터페이스가 람다용으로 설계된 것임을 알려준다.
  2. 해당 인터페이스가 추상 메서드를 오직 하나만 가지고 있어야 컴파일되게 해준다.
  3. 그 결과 유지보수 과정에서 누군가 실수로 메서드를 추가하지 못하게 막아준다.
  그러지 직접 만든 함수형 인터페이스에는 항상 @FunctionalInterface 애너테이션을 사용하라

4️⃣ 함수형 인터페이스를 API에서 사용할 때의 주의점
  서로 다른 함수형 인터페이스를 같은 위치의 인수로 받는 메서드들을 다중 정의해서는 안 된다. 클라이언트에게 불필요한 모호함만 안겨줄 뿐이며, 이 모호함으로 인해 실제 문제가 일어나기도 한다.
  ExecutorService의 submit 메서드는 Callable<T>를 받는 것과 Runnable을 받는 것을 다중정의했다. 그래서 올바른 메서드를 알려주기 위해 형변환해야 할 때가 왕왕 생긴다.
  이런 문제를 피하는 가장 쉬운 방법은 서로 다른 함수형 인터페이스를 같은 위치의 인수로 사용하는 다중정의를 피하는 것이다. "다중 정의는 주의해서 사용하라"

📖 핵심 정리 : 이제 자바도 람다를 지원한다. 지금부터는 API를 설계할 때 람다도 염두에 두어야 한다는 뜻이다. 입력값과 반환값에 함수형 인터페이스 타입을 활용하라. 보통은 java.util.function
            패키지의 표준 함수형 이너페이스를 사용하는 것이 가장 좋은 선택이다. 단, 흔치 않지만 직접 새로운 함수형 인터페이스를 만들어 쓰는 편이 나을 수 있음을 잊지 말자.

        
      
