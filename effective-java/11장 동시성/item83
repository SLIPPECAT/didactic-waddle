⭐️ 지연 초기화는 신중히 사용하라

✅ 지연 초기화(lazy initialization)
    - 의미 : 필드의 초기화 시점을 그 값이 처음 필요할 떄까지 늦추는 기법이다. 
    - 값이 전혀 쓰이지 않으면 초기화도 결코 일어나지 않는다.
    - 주로 최적화 용도로 쓰이지만, 클래스와 인스턴스 초기화 때 발생하는 위험한 순환 문제를 해결하는 효과도 있다.

1️⃣ 개요
    - 다른 모든 최적화와 마찬가지로 지연 초기화에 대해 "필요할 떄까지 하지 말라"

2️⃣ 지연 초기화가 필요한 경우
    - 해당 클래스의 인스턴스 중 그 필드를 사용하는 인스턴스의 비율이 낮은 반면, 그 필드를 초기화하는 비용이 큰 경우 (성능 측정으로 파악해야 한다.)

3️⃣ 대부분의 상황에서 일반적인 초기화가 지연 초기화보다 낫다.


4️⃣ 지연 초기화의 사용
    1. 지연 초기화가 초기화 순환성을 깨뜨릴 거 같으면 synchronized를 단 접근자를 사용하자. 가장 간단하고 명확한 대안이다.
    2. 성능 떄문에 정적 필드를 초기화해야 한다면 지연 초기화 홀더 클래스 관용구를 사용하자.
    3. 성능 때문에 인스턴스 필드를 지연 초기화해야 한다면 이중검사 관용구를 사용하라. (필드를 volatile로 선언해야 한다.)

📖 핵심 정리
    - 대부분의 필드는 지연시키지 말고 곧바로 초기화해야 한다. 성능 때문에 혹은 위험한 초기화 순환을 막기 위해 꼭 지연 초기화를 써야 한다면 올바른 지연 초기화 기법을 사용하자.
      인스턴스 필드에는 이중검사 관용구를, 정적 필드에는 지연 초기화 홀더 클래스 관용구를 사용하자. 반복해 초기화해도 괜찮은 인스턴스 필드에는 단일검사 관용구도 고려 대상이다.
