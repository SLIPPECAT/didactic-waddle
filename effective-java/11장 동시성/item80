⭐️ 스레드보다는 실행자, 태스크, 스트림을 애용하라

1️⃣ 개요 : java.util.concurrent 패키지의 등장하였으며 해당 패키지는 실행자 프레임워크라고 하는 인터페이스 기반의 유연한 태스크 실행 기능을 담고 있다.
        - 작업큐 생성
          ExecutorService exec = Executors.newSingleThreadExecutor();
        - 실행자에 실행할 태스크를 넘기는 방법
          exec.execute(runnable)
        - 실행자를 우아하게 종료시키는 방법        
          exec.shutdown();

2️⃣ 실행자 서비스의 주요 기능
    1. 특정 태스크가 완료되기를 기다린다. (get 메서드)
    2. 태스크 모음 중 아무것(invokeAny 메서드) 하나 혹은 모든 태스크(invokeAll 메서드)가 완료되기를 기다린다.
    3. 실행자 서비스가 종료하기를 기다린다. (awaitTermination 메서드)
    4. 완료된 태스크들의 결과를 차례로 받는다. (ExecutorCompletionService 이용)
    5. 태스크를 특정 시간에 혹은 주기적으로 실행하게 한다. (ScheduledThreadPoolExecutor 이용)

3️⃣ 실행자 서비스 생성
    - 가벼운 서버라면 Executors.newCachedThreadPool이 일반적으로 좋은 선택이다.
    - 무거운 프로덕션 서버에서는 스레드 개수를 고정한 Executors.newFixedThreadPool을 선택하거나 완전히 통제할 수 있는 ThreadPoolExecutor를 직접 사용하는 것이 낫다.

4️⃣ 실행자 프레임워크
    - 작업 단위와 실행 메커니즘이 분리된다.
    - 작업 단위를 나타내는 핵심 추상 개념이 태스크다.
    - 태스크에는 Runnable과 Callable이 있다. (Callable은 Runnable과 비슷하지만 값을 반환하고 임의 예외를 던질 수 있다.)
    - 컬렉션 프레임워크가 데이터 모음을 담당하듯 실행자 프레임워크가 작업 수행을 담당해준다.

    - 포크 조인 태스크 지원
      포크 조인 태스크는 포크 조인 풀이라는 특별한 실행자 서비스가 실행해준다.
