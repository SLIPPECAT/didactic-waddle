⭐️ wait와 notify보다는 동시성 유틸리티를 애용하라

1️⃣ 개요 : 자바 5에서 도입된 고수준의 동시성 유틸리티가 이전이라면 wati, notify로 하드코딩해야 했던 전형적인 일들을 대신 처리해주게 되엇다.
        wait, notify는 올바르게 사용하기가 까다로우니 고수준 동시성 유틸리티를 사용하자.

2️⃣ java.util.concurrnet 
    1. 실행자 프레임워크(item80)
    2. 동시성 컬렉션
        List, Queue, Map 같은 표준 컬렉션 인터페이스에 동시성을 가미해 구현한 고성능 컬렉션
        높은 동시성에 도달하기 위해 동기화를 각자의 내부에서 실행
        -> 동시성 컬렉션에서 동시성을 무력화하는 건 불가능, 외부에서 락을 추가로 사용하면 오히려 속도가 느려진다.

        여러 동작을 하나의 원자적 동작으로 묶는 '상태 의존적 수정' 메서드들이 추가되었다.
        자바 8 일반 컬렉션 인터페이스에도 디폴트 메서드(item21) 형태로 추가되었다.

        동시성 컬렉션은 동기화한 컬렉션을 낡은 유산으로 만들어버렸다.
        ex. Collections.synchronizedMap 보다는 ConcurrentHashMap을 사용하는 게 훨씬 좋다.
            동화된 맵을 동시성 맵으로 교체하는 것만으로도 동시성 애플리케이션의 성능은 극적으로 개선된다.


        ex. Blocking Queue의 take : 큐의 첫 원소를 꺼낸다. 만약 비어있다면 새로운 원소가 추가될 때까지 기다린다. (생산자-소비자 큐 사용에 적합?)
            
    3. 동기화 장치
        스레드가 다른 스레드를 기다릴 수 이게 하여, 서로 작업을 조율할 수 있게 해준다.
        가장 자주 쓰이는 동기화 장치는 CountDownLatch와 Semaphore. CyclicBarrier, Exchanger는 그보다 덜 쓰ㅇㄴ다.
        가장 강력한 동기화 장치는 바로 Phaser

        카운트다운 래치(latch; 걸쇠): 일회성 장벽, 하나 이상의 스레드가 또 다른 하나 이상의 스레드 작업이 끝날 때까지 기다리게 한다.

3️⃣ wait 사용의 표준방식
    - wait 메서드를 사용할 때는 반드시 대기 반목문(wait loop) 관용구를 사용하라. 반복문 밖에서는 절대로 호출하지 말자.

📖 핵심 정리 : wait, notify를 직접 사용하는 것을 동시성 '어셈블리 언어'로 프로그래밍하는 것에 비유할 수 있다. 반면 java.util.concurrenrt는 고수준 언어에 비유할 수 있다.
            코드를 새로 작성한다면 wait와 notify를 쓸 이유가 거의 (어쩌면 없다.) 이들을 사용하는 레거시 코드를 유지보수해야 한다면 wait는 항상 표준 관용구에 따라 while문
            안에서 호출하도록 하자. 일반적으로 notify보다는 notifyAll을 사용해야 한다. 혹시라도 notify를 사용한다면 응답 불가 상태에 빠지지 않도록 주의하자.

