⭐️ 제네릭과 가변인수를 쓸 때는 신중하라

✔️ 참고 : Varargs(variable arguments)는 가변 인자를 의미합니다. 함수나 메서드에 전달되는 인자의 개수가 가변적일 때 사용됩니다. 이는 인자의 개수가 동적으로 변할 수 있음을 의미합니다.
        가변 인자는 일반적으로 배열 형태로 처리됩니다. 함수 또는 메서드의 정의에서 가변 인자는 매개변수 리스트의 마지막에 "..."을 사용하며 선언됩니다.
        public void myMethod(String... args) { // 가변 인자 처리 }
        myMethod는 문자열을 가변 개수로 전달받는 메서드입니다. 메서드 내에서 args는 문자열 배열로 사용될 수 있습니다. 따라서 myMethod를 호출할 때 전달하는 인자의 개수에 상관없이 문자열을 처리할 수 있습니다.

1️⃣ 개요 : 가변인수 메서드와 제네릭은 자바 5때 함께 추가되었으니 서로 잘 어우러지리라 기대하겠지만, 그렇지 않다. 가변인수는 메서드에 넘기는 인수의 개수를 클라이언트가 조절할 수 있게
        해주는데, 구현 방식에 허점이 있다. 가변인수 메서드를 호출하면 가변인수를 담기 위한 배열이 자동으로 하나 만들어진다. 그런데 내부로 감춰야 했을 이 배열을 그만 클라이언트에
        노출하는 문제가 생겼다. 그결과 varargs 매개변수에 제네릭이나 매개변수화 타입이 포함되면 알기 어려운 컴파일 경고가 발생한다.
        itme28에서 실체화 불가 타입은 런타임에는 컴파일보다 타입 관련 정보를 적게 담고 있음을 배웠다. 그리고 거의 모든 제네릭과 매객변수화 타입은 실체화되지 않는다.
        메서드를 선언할 때, 실체화 불가 타입으로 varags 매개 변수를 선언하면 컴파일러가 경고를 보낸다. 가변인수 메서드를 호출할 때도 varargs 매개변수가 실체화 타입으로 추론되면,
        그 호출에 대해서도 경고를 낸다.

        매개변수화 타입의 변수가 타입이 다른 객체를 참조하면 힙 오염이 발생한다. 이렇게 다른 타입 객체를 참조하는 상황에서는 컴파일러가 자동 생성한 형변환이 실패할 수 있으니,
        제네릭 타입 시스템이 약속한 타입 안전성의 근간이 흔들려버린다.

        제네릭 varargs 배열 매개변수에 값을 저장하는 것은 안전하지 않다.

❓ 제네릭 배열을 프로그래머가 직접 생성하는 건 허용하지 않으면서 제네릭 varargs 매개변수를 받는 메서드를 선언할 수 있게 한 이유는 무엇일까?
A: 제네릭이나 매개변수화 타입의 varags 매개변수를 받는 메서드가 실무에서 매우 유용하기 때문이다. 그래서 언어 설계자는 이 모순을 수용하기로 했다. 

@SafeVarargs 애너테이션은 메서드 작성자가 그 메서드가 타입 안전함을 보장하는 장치다. 컴파일러는 이 약속을 믿고 그 메서드가 안전하지 않을 수 있다는 경고를 더 이상 하지 않는다.

❓ 메서드가 안전한지는 어떻게 확신할 수 있을까?
A : 가변인수 메서드를 호출할 때 varargs 매개변수를 담는 제ㅔㄴ릭 배열이 만들어진다는 사실을 억하자. 메서드가 이 배열에 아무것도 저장하지 않고 그 배열의 참조가 노출되지 않는다면 타입 안전하다.
    달리 말하면, 이 varargs 매개변수 배열이 호출자로부터 그 메서드로 순수하게 인수들을 전달하는 일만 한다면(varargs의 목적대로만 쓰인다면) 그 메서드는 안전하다. 
    이 때, varargs 매개변수 배열에 아무것도 저장히지 않고도 타입 안정성을 깰 수도 있으니 주의해야 한다. 

제네릭 varargs 매개변수 배열에 다른 메서드가 접근하도록 허용하면 안전하지 않다.
예외1. @SafeVarargs로 제대로 애노테이트된 또 다른 varargs 메서드에 넘기는 것은 안전하다. 두 번째, 그저 이 배열 내용의 일부 함수를 호출만 하는 일반 메서드에 넘기는 것도 안전하다.

@SafeVarargs 애너테이션을 사용해야 할 때를 정하는 규칙은 간단하다. 제네릭이나 매개변수화 타입의 varargs 매개변수를 받는 모든 메서드에 @SafeVarargs를 달라.
그래야 사용자를 헷갈리게 하는 컴파일러 경고를 없앨 수 있다. 이 메말은 안전하지 않은 varargs 메서드는 절대 작성해서는 안 된다는 뜻이다. 
다음 두 조건을 모두 만족하는 제네릭 varargs 메서드는 안전하다. 둘 중 하나라도 어겼다면 수정하라!

조건1. varargs 매개변수 배열에 아무것도 저장하지 않는다.
조건2. 그 배열(혹은 복사본)을 신뢰할 수 없는 코드에 노출하지 않는다.

✔️ @SafeVarargs 애너테이션은 재정의할 수 없는 메서드에만 달아야 한다. 재정의한 메서드도 안전할지는 보장할 수 없기 때문이다. 자바 8에서 이 애너테이션은 오직 정적 메서드와 final
  인스턴스 메서드에만 붙일 수 이쏙, 자바 9부터는 private 인스턴스 메서드에도 허용한다.

(실체는 배열인) varargs 매개변수를 List 매개변수로 바꿀 수도 있다.

정적 팩터리 메서드인 List.of를 활용하면 다음 코드와 같이 이메서드에 임의 개수의 인수를 넘길 수 있다. 이렇게 사용하는 게 가능한 이유는 List.of에도 @SafeVarargs가 달려 있기 때문이다.

audience = flatten(List.of(friends, romans, countrymen));

이 방식의 장점은 컴파일러가 이 메서드의 타입 안전성을 검증할 수 있다는 데 있다. @SafeVarargs 애너테이션을 우리가 직접 달지 않아도 되며, 실수로 안전하다고 판단할 걱정도 없다.
단점이라면 클라이언트 코드가 살짝 지저분해지고 속도가 조금 느려질 수 있다는 정도다.
또한, 이 방식은 toArray처럼 varargs 메서드를 안전하게 작성하는 게 불가능한 상황에서도 쓸 수 있다. 이 toArray의 List 버전이 바로 List.of로, 자바 라이브러리 차원에서
제공하니 우리가 직접 작성할 필요도 없다.

📖 핵심 정리 : 가변인수와 제네릭은 궁합이 좋지 않다. 가변인수 기능은 배열을 노출하여 추상화가 완벽하지 못하고, 배열과 제니릭의 타입 규칙이 서로 다르기 때문이다.
            제네릭 varargs 매개변수는 타입 안전하지는 않지만, 허용된다. 메서드에 제네릭 (혹은 매개변수화된) varargs 매개변수를 사용하고자 한다면, 먼저 그 메서드가
            타입 안전한지 확인한 다음 @SafeVarargs 애너테이션을 달아 사용하는 데 불편함이 없게끔 하자.
