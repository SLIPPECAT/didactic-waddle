변경 가능성을 최소화하라

불변 클래스란 간단히 말해 그 인스턴스의 내부 값을 수정할 수 없는 클래스다.
불변 인스턴스에 간직된 정보는 고정되어 객체가 파괴되는 순간까지 절대 달라지지 않는다.
자바 플랫폼 라이브러리에도 다양한 불변 클래스가 있다.

String, 기본 타입의 박싱된 클래스들, BigInteger, BigDecimal이 여기 속한다.

불변 클래스는 가변 클래스보다 설계하고 구현하고 사용하기 쉬우며, 오류가 생길 여지도 적고 훨씬 안전하다.
클래스를 불변으로 만들려면 다음 다섯 가지 규칙을 따르면 된다.

1. 객체의 상태를 변경하는 메서드(변경자)를 제공하지 않는다.
2. 클래스를 확장할 수 없도록 한다.
3. 모든 필드를 final로 선언한다.
4. 모든 필드를 private으로 선언한다.
5. 자신 외에는 내부 가변 컴포넌트에 접근할 수 없도록 한다.

피연산자에 함수를 적용해 결과를 반환하지만, 피연산자 자체는 그대로인 프로그래밍 패턴을 함수형 프로그래밍이라 한다.
절차적 혹은 명령형 프로그래밍에서는 메서드에서 피연산자인 자신을 수정해 자신의 상태가 변하게 된다. 
또한 메서드 이름으로 (add같은) 동사 대신 (plus)같은 전치사를 사용한다는 것에 주목하자.

불변 객체는 생성된 시점의 상태를 파괴될 때까지 그대로 간직한다. 모든 생성자가 클래스 불변식을 보장한다면 그 클래스를 사용하는 프로그래머가 다른 노력을 
들이지 않더라도 영원히 불변으로 남는다. 반면 가변 객체는 임의의 복잡한 상태에 놓일 수 있다.

불변 객체는 근본적으로 스레드 안전하여 따로 동기화할 필요 없다. 여러 스레드가 동시에 사용해도 절대 훼손되지 않는다.
클래스를 스레드 안전하게 만드는 가장 쉬운 바법이기도 하다. 불변 객체에 대해서는 어떤 스레드도 다른 스레드에 영향을 줄 수 없다. 따라서 안심하고 공유할 수 있다.


<한 걸음 더>
불변 클래스는 자주 사용되는 인스턴스를 캐싱하여 같은 인스턴스를 중복 생성하지 않게 해주는 정적 팩터리(아이템)를 제공할 숫 있다.
정적 팩터리를 사용하면 여러 클라이언트가 인스턴스를 공유하여 메모리 사용량과 가비지 컬렉션 비용이 줄어든다. 새로운 클래스를 설계할 때, public 생성자 대신
정적 팩터리를 만들어두면, 클라이언트를 수정하지 않고도 필요에 따라 캐시 기능을 나중에 덧붙일 수 있다.

불변 객체를 자유롭게 공유할 수 있다는 점은 방어적 복사도 필요 없다는 결론으로 자연스럽게 이어진다.
String의 클래스는 가급적 사용하지 않아야 한다. 아무리 복사해봐야 원본과 똑같으니 복사 자체가 의미가 없다.

불변 객체는 자유롭게 공유할 수 있음은 물론, 불변 객체끼리는 내부 데이터를 공유할 수 있다.

객체를 만들 때 다른 불변 객체들을 구성요소로 사용하면 이점이 맣다. 값이 바뀌지 않는 구성요소들로 이뤄진 객체라면 구조가 복잡하더라도 불변식을 유지하기 훨씬 수월하기 때문이다.
ex. 불변 객체는 맵의 키와 집합(Set)의 원소로 쓰게 안성맞춤이다. 맵이나 집합은 그 안에 담긴 값이 바뀌면 불변식이 허물어지는데, 불변 객체를 사용하면 그런 걱정은 하지 않아도 된다.

불변 객체는 그 자체로 실패 원자성을 제공한다.(에외가 발생한 후에도 여전히 유효한 상태여야 한다는 성질)





