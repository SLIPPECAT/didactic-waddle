⭐️ 명명 패턴보다 애너테이션을 사용하라

📖 개요 : 전통적으로 도구나 프레임워크가 특별히 다뤄야 할 프로그램 요소에는 딱 구분되는 명명 패턴을 적용해왔다. 

1️⃣ 명명 패턴의 단점 1. 오타가 나면 안된다.
                2. 올바른 프로그램 요소에서만 사용되리라 보증할 방법이 없다.
                3. 프로그램 요소를 매개변수로 전달할 마땅한 방법이 없다

                이를 해결해주는 멋진 개념으로, JUnit도 버전 4부터 전면 도입하였다.
                Test라는 이름의 애너테이션을 정의한다고 할 때, 자동으로 수행되는 간단한 테스트용 애터네이션으로 예외가 발생하면 해당 테스트를 실패로 처리한다.

 2️⃣ 애너테이션 : @Test 애너테이션 타입 선언 자체에도 두 가지의 다른 애너테이션이 달려 있다. @Retention과 @Target이다.
              이처럼 애너테이션 선언에 다는 애너테이션을 메타애너테이션이라고 한다. 메타애너테이션을 생략하면 테스트 도구는 @Test를 인식할 수 없다.
              @Retention 메타애너테이션을 생략하면 테스트 도구는 @Test가 반드시 메서드 선언에서만 사용해야 한다고 알려준다. (클래스, 필드 선언 x)

              @Test가 적용된 모습을 보면 "아무 매개변수 없이 단순히 대상에 마킹"을 하고 있는데 그런 의미에서 마커(marker) 애너테이션이라 한다.
              이 애너테이션을 사용하면 프로그래머가 Test이름에 오타를 내거나 메서드 선언 외의 프로그램 요소에 달면 컴파일 오류를 내준다.

              

