⭐️ ordinal 인덱싱 대신 EnumMap을 사용하라

1️⃣ 개요 : 이따금 배열이나 리스트에서 원소를 꺼낼 때 ordinal 메서드(아이템 35)로 인덱스를 얻는 코드가 있다.

2️⃣ EnumMap 사용의 장점 : 더 짧고 명료하고 안전하고 성능도 원래 버전과 비등하다. 안전하지 않은 형변환은 쓰지 않고, 맵의 키인 열거 타입이 그 자체로 출력용 문자열을 제공하니 출력 결과에
                      직접 레이블을 달 일도 없다. 나아가 배열 인덱스를 계산하는 과정에서 오류가 날 가능성을 원천봉쇄된다. EnumMap의 성능이 ordinal을 쓴 배열에 비견되는 이유는
                      그 내부에서 배열을 사용하기 때문이다. 내부 구현 방식을 안으로 숨겨서 Map의 타입 안전성과 배열의 성능을 모두 얻어낸 것이다.
           사용 : 전이 하나를 얻으려면 이전 상태와 이후 상태가 필요하니, 맵 2개를 중첩하면 쉽게 해결할 수 있다. 안쪽 맵은 이전 상태와 전이를 연결하고 바깥 맵은 이후 상태와 안쪽
                 맵을 연결한다. 전이 전후의 두 상태를 전이 열거 타입 Transition의 입력으로 받아, 이 Transition 상수들로 중첩된 EnumMap을 초기화하면 된다.

✔️ 코드를 간략히 하기 위해 앞으 코드에서는 해당 전이가 없을 때 null을 사용했다. 이는 런타임에 NullPointerException을 일이키는 안 좋은 습관이지만, 이 문제를 깔끔히 해결하려면
  코드가 아주 길어져서 이번 아이템에서 설명하려는 핵심이 잘 드러나지 않게 된다. 그래서 어쩔 수 없이 예외 처리 코드를 생략했다.

📖 핵심 정리 : 배열의 인덱스를 얻기 위해 ordinal을 쓰는 것은 일반적으로 좋지 않으니, 대신 EnumMap을 사용하라. 다차원 관계는 EnumMap<..., EnumMap<...>>으로 표현하라.
            "애플리케이션 프로그래머는 Enum.ordinal을 (웬만해서는) 사용하지 말아야 한다"는 일반 원칙의 특수 사례다.
