⭐️ 예외는 진짜 예외 상황에만 사용하라

1️⃣ 개요 

1. 예외는 예외 상황에 쓸 용도로 설계되었으므로 JVM 구현자 입장에서는 명확한 검사만큼 빠르게 만들어야 할 동기가 약하다. (최적화에 별로 신경쓰지 않았을 가능성이 크다.)
2. 코드를 try-catch 블록 안에 넣으면 JVM이 적용할 수 있는 최적화가 제한된다.
3. 배열을 순회하는 표준 관용구는 앞서 걱정한 중복 검사를 수행하지 않는다. JVM이 알아서 최적화해 없애준다.

실상은 예외를 사용한 쪽이 표준 관용구보다 훨씬 느리다.

예외를 사용한 반복문의 해악은 코드를 헷갈리게 하고 성능을 떨어뜨리는 데서 끝나지 않는다. 심지어 제대로 동작하지 않을 수 있다.

표준적이고 쉽게 이해되는 관용구를 사용하고, 성능 개선을 목적으로 과하게 머리를 쓴 기법은 자제하라. 실제로 선으이 좋아지더라도 자바 플랫폼이 꾸준히 개선되고 있으니
최적화로 얻은 상대적인 성능 우위가 오래가지 않을 수 있다. 반면 과하게 영리한 기법에 숨겨진 미묘한 버그의 폐해와 어려워진 유지보수 문제는 계속 이어질 것이다.

잘 설계된 API라면 클라이언트가 정상적인 제어 흐름에서 예외를 상용할 일이 없게 해야 한다.

특정 상태에서만 호출할 수 있는 '상태 의존적' 메서드를 제공하는 클래스는 '상태 검사' 메서드도 함께 제공해야 한다.
Iterator 인터페이스의 next hasNext가 각각 상태 의존적 메서드와 상태 검사 메서드에 해당한다. 그리고 별도의 상태 검사 메서드 덕분에 다음과 같은 표준
for 관용구를 사용할 수 있다. (for-each 내부적으로 hasNext를 사용한다.)

for (Iterator<Foot> i = collection.iterator(); i.hasNext();) {
    Foo foo = i.next();
    ...
}

Iterator가 hasNext를 제공하지 않았다면 그 일을 클라이언트가 대신해야만 했다

// 컬렉션을 이런 식으로 순회하지 말 것
try {
    Iterator<Foo> i = collection.iterator();
    while(true){
        Foo foo = i.next();
    }
} catch (NoSuchElementException e) {
}

올바르지 않은 상태일 때 빈 옵셔널(item55) 혹은 null 값은 특수한 값을 반환하는 방법이다.

상태 검사 메서드, 옵셔널 특적 값 중 하나를 선택하는 지침
  1. 외부 동기화 없이 여러 스레드가 동시에 접근할 수 있거나 외부 요인으로 상태가 변할 수 있다면 옵셔널이나 특정 값을 사용한다.
      상태 검사 메서드와 상태 의존적 메서드 호출 사이의 객체의 상태가 변할 수 있기 때문이다.
  2. 성능이 










