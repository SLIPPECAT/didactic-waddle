⭐️ 가능한 한 실패 원자적으로 만들라

1️⃣ 일반화해 이야기하면. 호출된 메서드가 실패하더라도 해당 객체는 메서드 호출 전 상태를 유지해야 한다. (이런 특성을 실패 원자적이라도 한다.)

2️⃣ 메서드를 실패 원자적으로 만드는 방법
    1. 불변 객체(item 17)로 설계하는 것
        불변 객체는 태생적으로 실패 원자적이다. 메서드가 실패하면 새로운 객체가 만들어지지는 않을 수 있으나 기존 객체가 불안정한 상태에 빠지는 일은 결코 없다.
        불변 객체의 상태는 생성 시점에 고정되어 절대 변하지 않기 때문이다.
    
    2. 유효성 검사를 하는 것
        객체의 내부 상태를 변경하기 전에 잠재적 예외의 가능성을 걸러낸다.
        실패할 가능성이 있는 모든 코드를 객체의 상태를 바꾸는 코드보다 앞에 배치하는 방법 : 계산을 수행해보기 전에는 인수의 유효성을 검사해볼 수 없을 때 덧붙여 쓸 수 있는 기법

    3. 객체의 임시 복사본에서 작업을 수행한 다음, 작업이 성공적으로 완료되면 원래 객체와 교체하는 것
        데이터를 임시 자료구조에 저장해 작업하는 게 더 빠를 때 적용하기 좋은 방식

    4. 작업 도중 발생하는 실패를 가로채는 복구 코드를 작성하여 작업 전 상태로 되돌리는 방법
        주로 (디스크 기반의) 내구성을 보장해야 하는 자료구조에 쓰이는데 자주 쓰이는 방법은 아니다.

3️⃣ 주의할 점
    - 실패 원자성은 일반적으로 권장되는 덕목이지만 항상 달성할 수 있는 것은 아니다.
    - 실패 원자적으로 만들 수 있더라도 항상 그리 해야 하는 것도 아니다. 실패 원자성을 달성하기 위한 비용이나 복잡도가 아주 큰 연산도 있기 때문이다.
      그래도 문제가 무엇인지 알고 나면 실패 원자성을 공짜로 얻을 수 있는 경우가 더 많다.
    - 메서드 명세에 기술한 예외라면 설혹 예외가 발생하더라도 객체의 상태는 메서드 호출 전과 똑같이 유지돼야 한다는 것이 기본 규칙이다. 이 규칙을 지키지 못한다면 실패 시의 객체 상태를
      API 설명에 명시해야 한다. 이것이 이상적이나, 아쉽게도 지금의 API 문서 상당부분이 잘 지키지 않고 있다.



