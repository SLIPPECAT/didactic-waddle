⭐️ 필요 없는 검사 예외 사용은 피하라

1️⃣ 개요 : 검사 예외를 싫어하는 자바 프로그래머가 많지만 제대로 활용하면 API와 프로그램의 질을 높일 수 있다.
        결과를 코드로 반환하거나 비검사 예외를 던지는 것과 달리, 검사 예외는 발생한 문제를 프로그래머가 처리하여 안정성을 높이게끔 해준다.

        어떤 메서드가 검사 예외를 던질 수 있다고 선언됐다면, 이를 호출하는 코드에서는 catch 블록을 두어 그 예외를 붙잡아 처리하거나 더 바깥으로 던져 문제를 전파애햐 한다.
        어느 쪾이든 사용자에게 부담을 준다. 더구나 검사 예외를 던지는 메서드는 스트림 안에서 직접 사용할 수 없기 때문에 자바 8부터는 더욱 부담이 커졌다.

        ❗️ 더 나은 방법이 없다면 비검사 예외를 선택해야 한다.

2️⃣ 검사 예외를 회피하는 방법
    1. 적절한 결과 타입을 담은 옵셔널을 반환하는 것 (검사 예외를 던지는 대신 단순히 빈 옵셔널을 반환)
        단점: 예외가 발생한 이유를 알려주는 부가정보를 담을 수 없다. <-> 예외를 사용하면 구체적인 예외 타입과 그 타입이 제공하는 메서드들을 활용해 부가 정보를 제공할 수 있다. (item70) 
    2. 검사 예외를 던지는 메서드를 2개로 쪼개 비검사 예외로 바꿀 수 있다. 

    ex. 검사 예외를 던지는 메서드 - 리팩터링 전
        try {
            obj.action(args);
        } catch (TheCheckedException e) {
            ...// 예외 상황에 대처한다.
        }

    ex. 상태 검사 메서드와 비검사 예외를 던지는 메서드 - 리팩터링 후
        if (obj.actionPermitted(args)){
            obj.action(args)
        } else {
            ...// 예외 상황에 대처한다.
        }

📖 핵심 정리 : 꼭 필요한 곳에만 사용한다면 검사 예외는 프로그램의 안정성을 높여주지만, 남용하면 쓰기 고통스러운 API를 낳는다.
            API 호출자가 예외 상황에서 복구할 방법이 없다면 비검사 예외를 던지자. 복구가 가능하고 호출자가 그 처리를 해주길 바란다면, 
            우선 옵셔널을 반환해도 될지 고민하자. 옵셜널만으로는 상황을 처리하기에 충분한 정보를 제공할 수 없을 때만 검사 예외를 던지자.
