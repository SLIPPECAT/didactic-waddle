⭐️ 표준 예외를 사용하라

1️⃣ 개요 : 프로그래머는 그렇지 못한 프로그래머보다 더 많은 코드를 재사용한다. 예외도 마찬가지로 재사용하는 것이 좋으며, 자바 라이브러리는 대부분 API에서 쓰기에 충분한 수의 예외를 제공한다.

2️⃣ 표준 예외 사용의 장점
  - API가 다른 사람이 익히고 사용하기 쉬워진다는 것이다. 많은 프로그래머에게 이미 익숙해진 규약을 그대로 따르기 때문이다.
  - 예외 클래스 수가 적을수록 메모리 사용량도 줄고 클래스를 적재하는 시간도 적게 걸린다.

3️⃣ 표준 예외의 사용
    1. IllegalArgumentException(item49) : 호출자가 인수로 부적절한 값을 넘길 때 던지는 예외
        ex. 반복 횟수를 지정하는 매개변수에 음수를 건넬 때 쓸 수 있다.

    2. IllegalStateException : 대상 객체의 상태가 호출된 메서드를 수행하기에 적합하지 않을 때 주로 사용
        ex. 제대로 초기화되지 않은 객체를 사용하려 할 때 던질 수 있다.

    3. null 값을 허용하지 않는 메서드에 null을 건네면 관례상 IllegalArgumentException이 아닌 NullPointerException을 던진다.

    4. 어떤 쉬퀀스의 허용 범위를 넘는 값을 건넬 때도 IllegalArgumentException 보다는 IndexOutOfBoundsException을 던진다.

    5. ConcurrentModificationException은 단일 스레드에서 사용하려고 설계한 객체를 여러 스레드가 동시에 수정하려 할 때 던진다.
      (외부 동기화 방식으로 사용하려고 설계한 객체도 마찬가지). 이 예외는 문제가 생길 가능성을 알려주는 정도의 역할로 쓰인다.

    6. UnsupoortedOperationException : 클라이언트가 요청한 동작을 대상 객체가 지원하지 않을 때 던진다. 대부분 객체는 자신이 정의한 메서드를 모드 지원하니 흔히 쓰이는 예외는 아니다.
        ex. 구현하려는 인터페이스의 메서드 일부를 구현할 수 없을 때 쓰는데, 예컨대 원소를 넣을 수만 있는 List 구현체에 대고 누군가 remove 메서드를 호출하면 이 예외를 던질 것이다.

    ❗️주의 : Exception, RuntimeException, Throwable, Error는 직접 재사용하지 말자. 추상 클래스라고 생각하자. 여러 성격의 예외들을 포괄하는 클래스이므로 안정적으로 테스트 할 수 없다.

    더 많은 정보를 제공하길 원한다면 표준 예외를 확장해서 사용해도 좋다. 단, 예외는 직렬화할 수 있다는 사실만 기억하자. 이 사실만으로도 나만의 예외를 새로 만들지 않아야 할 근거로 충분할 수 있다.

    인수 값이 무엇이었든 어파치 실패했을 거라면 IllegalStateException을 그렇지 않으면 IllegalArgumentException을 던지자.

    🤔 음.. 그럼 내가 흔히 사용하고 있는 RuntimeException을 확장해서 사용하는 UserNotFoundException 이런 거를 줄이고 표준 예외를 사용하자는 걸까? 정도의 문제인걸까?
