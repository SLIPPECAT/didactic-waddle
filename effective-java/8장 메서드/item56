⭐️ 공개된 API 요소에는 항상 문서화 주석을 작성하라

- Javadoc-ref, Javadoc-guide 참고

1️⃣ 개요 : 자바독은 소스코드 파일에서 문서화 주석이라는 특수한 혀태로 기술된 설명을 추려 API 문서로 변환해준다.
        자바독 태그 : @literal @code @implSpec @index
        API를 올바로 문서화하려면 공개된 모든 클래스, 인터페이스, 메서드, 필드 선언에 문서화 주석을 달아야 한다. 😮

        기본 생성자에는 문서화 주석을 달 방법이 없으니 공개 클래스는 절대 기본 생성자를 사용하면 안된다.

        메서드용 문서화 주석에는 해당 메서드와 클라이언트 사이의 규약을 명료하게 기술해야 한다.
        상속용으로 설계된 클래스의 메서드가 아니라면 무엇을 하는지를 기술해야 한다. how가 아닌 what을 기술해야 한다.

2️⃣ 전제조건과 사후조건 기술        
        문서화 주석에는 해당 메서드를 호출하기 위한 전제조건을 모두 나열해야 한다. 또한 메서드가 성공적으로 수행된 후에 만족해야 하는 사후조건도 나열해야 한다.
        
        @throw : 전제조건 태그, 비검사 예외를 선언하여 암시적으로 기술 (비검사 예외 하나가 전제조건 하나와 연결)
        @param : 조건에 영향받는 매개변수에 기술할 수 있다

3️⃣ 부작용
  - 부작용 : 사후조건으로 명확히 나타나지는 않지만 시스템의 상태에 어떤 변화를 가져오는 것을 의미
  - ex. 백그라운드 스레드를 시작시키는 메서드라면 그 사실을 밝혀야 한다.

4️⃣ 태그의 종류와 사용 
  - @param 태그 : 메서드의 계약 기술
  - @return 태그 : 반환타입이 void가 아니라면 사용
    @return 태그에 대한 설명이 메서드 설명과 같을 때 return 태그를 생략해도 좋다.
  - @thrwos 태그 : 발생할 가능성이 있는 모든 예외에 사용

  - @관례상 param 태그와 return 태그의 설명은 해당 매개변수가 뜻하는 값이나 반환값을 설명하는 명사구를 쓴다.
  - 드물게 명사구 대신 산술 표현식을 쓰기도 한다.
  - @param, @return, @throws 태그의 설명에는 마침표를 붙이지 않는다. 
    (한글의 경우 완전하 종결 어미로 끝나면 마침표 붙이는 게 일관적이여 보인다. -- 옮긴이)
    
    ❗️ @param, @return, @throws
    /** 
    * Return the element at the sepcified position in this list;
    *
    * <p>This method is <i>not</i> guaranteed to run in constant
    * time. In some implementations it may run in time proportional
    * to the element position.
    *
    * @param index index of element to return; must be
    *        non-negative and less than the size of the list
    * @return the element at the specified position in this list
    * @throws IndexOutOfBoundsException if the index in out of range
    *         ({@code index < 0 || index >= this.size()}
    */
  E get(int index)

  - @throws 절에 사용한 {@code} 태그의 효과 두 가지
    1. 태그로 감싼 내용을 코드용 폰트로 렌더링
    2. 태그로 감싼 내용에 포함된 HTML 요소나 다른 자바독 태그를 무시
    cf. 주석에 여러 줄로 된 코드 예시를 넣으려면 {@code} 태그를 다시 <pre> 태그로 감싸면 된다. 

  - "this list" 라는 단어에서 "this"는 호출된 메서드가 자리하는 객체를 가리킨다.

  - @implSpec 태그 : 자기사용 패턴에 대해 설명, 메서드와 하위 클래스 사이의 계약을 설명하며, 하위 클래스들이 그 메서드를 상속하거나 super 키워드를 이용해 호출할 때
                    그 메서드가 어떻게 동잫하는지를 명확히 인지하고 사용하도록 해줘야 한다.
    cf. 일반적인 문서화 주석 : 해당 메서드와 클라이언트 사이의 계약을 설명

    ❗️ @implSpec
    /** 
    * Return true if this collection is empty;
    *
    * @implSpec
    * This implementation returns {@code this.size() == 0}.
    *
    * @return true if this collection is empty
    */
  public boolean isEmpty() { ... }

    - {@literal} 태그로 감싸는 것 : API 설명에 HTML 메타문자(<, >, & 등)를 포함시키기 위한 처리
      {@code} 태그와 비슷하지만 코드 폰트로 렌더링하지는 않는다.

    - {@index} : API에서 중요한 용어를 추가로 색인화 가능

    ❗️ 제네릭 타입이나 제네릭 메서드를 문서화할 때는 모든 타입 매개변수에 주석을 달아야 한다.
    /** 
    * An object that maps keys to values. A map cannot contain
    * duplicate keys; each key can map to at most one value.
    * 
    * (Remainder omitted)
    *
    * param <K> the type of keys maintained by this map
    * param <V> the type of mapped values
    */
  public interface Map<K, V> { ... }

    ❗️ 열거 타입을 문서화할 때는 상수들에도 주석을 달아야 한다. 열거 타입 자체와 그 열거 타입의 public 메서드도 물론이다.
        
    ❗️ 애너테이션 타입을 문서화할 때는 멤버들에도 모두 주석을 달아야 한다.
      애너테이션 타입 자체도 물론이다. 필드 설명은 명사구로 한다. 애너테이션 타입의 요약 설명은 프로그램 요소에 이 애너테이션을 단다는 것이 어떤 의미인지를 설명하는
      동사구로 한다. 한글로 쓴다면 동사로 끝나는 평범한 문장이면 된다.

5️⃣ 주의사항
  1. 요약설명은 반드시 대상의 기능을 고유하게 기수랳야 한다.
      헷갈리지 않으려면 한 클래스(또는 인터페이스) 안에서 요약 설명이 똑같은 멤버(혹은 생성자)가 둘 이상이면 안 된다.
      다중 정의된 메서스드들의 설명은 같은 문장으로 시작하는 게 자연스럽겠지만 문서화 주석에서는 허용되지 않는다.
  2. 요약 설명에서는 마침표(.)에 주의해야 한다.
      의도치 않은 마침표를 해결하기 위해 {@literal}로 감싸쭐 수 있다.
  3. 요약태그 {@summary}의 사용
  4. 메서드와 생성자의 요약 설명은 해당 메서드와 생성자의 동작을 설명하는 (주어가 없는) 동사구여야 한다.
  5. 클래스, 인터페이스, 필드의 요약 설명은 대상을 설명하는 명사절이어야 한다. 클래스와 인터페이스의 대상은 그 인스턴스이고, 필드의 대상은 필드 자신이다.
  6. package-info.java(패키지 설명), module-info.java(모듈 시스템) 파일에 작성

6️⃣ 자주 누락되는 설명 (스레드 안정성, 직렬화 가능성)
  1. 클래스 혹은 정적 메서드가 스레드 안전하든 그렇지 않든 스레드 안전 수준을 API 설명에 포함해야 한다.
    여러 클래스가 상호작용하는 복잡한 API라면 문서화 주석 외에도 전체 아키텍처를 설명하는 별도의 설명이 필요할 떄가 있다. 이런 설명 문서가 있다면
    관련 클래스나 패키지의 문서화 주석에서 그 문서의 링크를 제공해주면 좋다.

📖 핵심 정리 : 문서화 주석은 API를 문서화하는 가장 훌륭하고 효과적인 방법이다. 공개 API라면 빠짐없이 설명을 달아야 한다. 표준 규약을 일관되게 지키자.
            문서화 주석에 임의의 HTML태그를 사용할 수 있음을 기억하라. 단, HTML 메타문자는 특별하게 취급해야 한다.

