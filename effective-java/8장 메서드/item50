⭐️ 적시에 방어적 복사본을 만들라

1️⃣ 개요 : 자바는 안전한 언어다. 자바를 쓰는 즐거움 🥰 C, C++ 같이 안전하지 않은 언어에서 흔히 보는 버퍼 오버런, 배열 오버런, 와일드 포인터 같은 메모리 충돌 오류에서 안전하다
        자바로 작성한 클래스는 시스템의 다른 부분에서 무슨 짓을 하든 그 불변식이 지켜진다. 메모리 전체를 하나의 거대한 배열로 다루는 언어에서 누릴 수 없는 강점이다.

        하지만 아무리 자바라 해도 다른 클래스로부터 침범을 아무런 노력 없이 다 막을 수 있는 건 아니다. 그러니 클라이언트가 불변식을 깨뜨리려 혈안이 되어 있다고 가정하고 방어적으로
        프로그래밍해야 한다.

        Date가 가변이기 때문에 불변식을 무너드릴 수 있다.
        하지만 Date 대신 불변인 Instant를 사용하면 된다. (혹은 LocalDateTime이나 ZonedDateTime으르 사용해도 된다.)
        Date는 낡은 API이니 새로운 코드를 작성할 때는 더 이상 사용하면 안된다.

        외부 공격으로부터 Period 인스턴스의 내부를 보호하려면 생성자에서 받은 가변 매개변수 각각을 방어적으로 복사해야 한다. 그런 다음 Period 인스턴스 안에서는 복사본을 사용한다.

        순서가 부자연스러워보이지만 방어적 복사본을 만들고 그 이후에 유효성을 검사해야 한다.
        멀티스레딩 환경이라면 원본 객체의 유효성을 검사한 후 복사본을 만드는 그 찰나의 순가에 다른 스레드가 원본 객체를 수정할 위험이 있기 때문이다.
        방어적 복사를 매개변수 유효성 검사 전에 수행하면 이런 위험에서 해방될 수 있다. 컴퓨터 보안 커뮤니티에서는 이를 검사시점 / 사용시점 공격 혹은 TOCTOU 공격이라 한다.

        Date는 final이 아니므로 clone이 Date가 정의한 게 아닐 수 있다.

        매개변수가 제 3자에 의해 확장될 수 있는 타입이라면 방어적 복사본을 만들 때 clone을 사용해서는 안 된다.

        p.end().setYear(78)
