⭐️ 메서드 시그니처를 신중히 설계하라

1️⃣ 개요 - API 설계요령
  1. 메서드 이름을 신중히 짓자.
    표준 명명 규칙을 따라야 한다.
  2. 편의 메서드를 너무 많이 만들지 말자.
    아주 자주 쓰일 경우에만 별도의 약칭 메서드를 두자. 확신이 서지 않으면 만들지 말자 😓
  3. 매개변수 목록은 짧게 유지하자.
    4개 이하가 좋다.
    같은 타입의 매개변수 여러 개가 연달아 나오는 경우가 특히 해롭다. (실수로 순서를 바꿔 입력해도 그대로 컴파일되고 실행된다.)

2️⃣ 과하게 긴 매개변수 목록을 짧게 줄여주는 기술 세 가지
  1. 여러 메서드로 쪼갠다.
    기능을 원자적으로 쪼개다 보면, 자연스럽게 중복이 줄고 결합성이 낮아져 코드를 수정하기 수월해진다.
    직교성이 높은 설계는 가볍고 구현하기 쉽고 강력하다.
  2. 매개변수 여러 개를 묶어주는 도우미 클래스를 만드는 것이다.
    이런 도우미 클래스는 정적 멤버 클래스로 둔다.
  3. 객체 생성에 사용한 빌더 패턴을 메서드 호출에 응용한다?
    매개변수가 많을 때, 그중 일부는 생략해도 괜찮을 때 도움이 된다.
    먼저 모든 매개변수를 하나로 추상화한 객체를 정의하고, 클라이언트에서 이 객체의 세터 메서드를 호출해 필요한 값을 설정하게 한다.
    이때 각 세터 메서드는 매개변수 하나 혹은 서로 연관된 몇 개만 설정하게 한다.
    클라이언트는 먼저 필요한 매개변수를 다 설정한 다음, execute 메서드를 호출해 앞서 설정한 매개변수들의 유효성을 검사한다.
    마지막으로 완료된 객체를 넘겨 원하는 계산을 수행한다.
    ❗️ 매개변수의 타입으로는 클래스보다는 인터페이스가 더 낫다.
      ex. 메서드에 HashMap 대신 Map을 사용하기
    ❗️ boolean보다는 원소 2개짜리 열거 타입이 낫다.
      열거 타입을 사용하면 코드를 읽기고 쓰기가 더 쉬워진다. 나중에 선택지를 추가하기도 쉽다.
      ex. public enum TemperatureScale{ FAHRENHEIT, CELSIUS } ...필요하면 KELVIN 추가
      Thermometer.newInstance(true) 보다 Thermometer.newInstance(TemperatureScale.CELSIUS)가 하는 일을 훨씬 명확히 알려준다.
      double 값을 받아 섭씨온도로 변환해주는 메서드를 열거 타입 상수 각각에 정의해둘 수도 있다.
