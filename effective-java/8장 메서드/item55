⭐️ 옵셔널 반환은 신중히 하라

1️⃣ 자바 8 전, 메서드가 특정 조건에서 값을 반환할 수 없을 때 취할 수 있던 선택지 두 가지
    1. 예외 던지기
      허점 : 예외는 진짜 예외적인 상황에서만 사용해야 한다. 예외를 생성할 때 스택 추적 전체를 캡처하므로 비용도 만만치 않다.

    2. null 반환
      허점 : null을 반환할 수 있는 메서드를 호출할 때는, (null이 반환될 일이 절대 없다고 확신하지 않는 한) 별도 null 처리 코드를 추가해야 한다.
            null 처리를 무시하고 반환된 null 값을 어딘가에 저장해두면 언제가 NullPointerException이 발생할 수 있다.

2️⃣ 자바 버전 8이 되면 생긴 선택지 : Optional<T>
  ❓ Optional<T>? : null이 아닌 T 타입 참조를 하나 담거나, 혹은 아무것도 담지 않을 수 있다.
                    아무것도 담지 않은 옵셔널은 '비었다'고 말하고 어떤 값을 담은 옵셔널은 '비지 않았다'고 한다.
                    옵셔널은 원소를 최대 1개 가질 수 있는 '불변' 컬렉션이다. Optional<T>가 Collction<T>를 구현하지는 않았지만 원칙적으로 그렇다는 말이다.
  
  - 사용 : 보통은 T를 반환해야 하지만 특정 조건에서는 아무것도 반환하지 않아야 할 때 T 대신 Optional<T>를 반환하도록 선언하면 된다. 
        그러면 유효한 반환값이 없을 때는 빈 결과를 반환하는 메서드가 만들어진다.
  - 장점 : 옵셔널을 반환하는 메서드는 예외를 던지는 메서드보다 유연하고 사용하기 쉬우며, null을 반환하는 메서드보다 오류 가능성이 적다.
  - 주의사항 : 옵셔널을 반환하는 메서드에는 절대 null을 반환하지 말자. 옵셔널을 도입한 취지를 완전히 무시하는 행위다.
             옵셔널 또한 새로 할당하고 초기화해야 하는 객체이다. 그 안에서 값을 꺼내려면 메서드를 호출해야 하니 한 단계를 더 거치는 셈이다.

3️⃣ 옵셔널 반환을 선택하는 기준
  - 옵셔널은 검사 예와외 취지가 비슷하다. 즉, 반환값이 없을 수 있음을 API 사용자에게 명확히 알려준다.
  - 검사 예외를 던지면 클라이언트에서는 반드시 이에 대처하는 코드를 작성해넣어야 한다.
  - 비슷하게 메서드가 옵셔널을 반환한다면 클라이언트는 값을 받지 못했을 때 취할 행동을 선택해야 한다. 그중 하나는 기본값을 설정하는 방법이다.

4️⃣ 옵셔널 활용
    1. 기본값을 정해둘 수 있다. (클라이언트가 값을 받지 못했을 때 취할 행동)
    2. 원하는 예외를 던질 수 있다. (실제 예외가 아니라 팩터리를 건네어 예외가 실제로 발생하지 않는한 예외 생성 비용은 들지 않는다.)
    3. 항상 값이 채워져 있다고 가정한다.

5️⃣ isPresent 메서드
    - 안전 밸브 역할을 하며 옵셔널이 채워져 있으면 true를, 비어 있으면 false를 반환한다. 이 메서드로는 원하는 모든 작업을 수행할 수 있지만 신중히 사용해야 한다.
    - isPresent를 쓴 코드 중 상당수는 다른ㄹ 메서드들도 대체할 수 있으며, 그렇게 하면 더 짧고 명확하고 용법에 맞는 코드가 된다.

6️⃣ Optional을 사용하지 않아도 좋은 경우
    - 반환값으로 옵셔널을 사용한다고 해서 무조건 득이 되는 건 아니다. 컬렉션, 스트림, 배열, 옵셔널 같은 컨테이너 타입은 옵셔널로 감싸면 안 된다. 
    - 빈 Optional<List<T>>를 반환하기보다는 빈 List<T>를 반환하는 게 좋다.
    - 빈 컨테이너를 그대로 반환하면 클라이언트에 옵셔널 처리 코드를 넣지 않아도 된다. 

7️⃣ 메서드 반환 타입을 Optional<T>로 선언하는 규칙
    1. 결과가 없을 수 있으며, 클라이언트가 이 상황을 특별하게 처리해야 한다면 Optional<T>를 반환한다.
    2. 성능이 중요한 상황에서는 옵셔널이 맞지 않을 수 있다.
    3. 박싱된 기본 타입을 담은 옵셔널을 반환하느느 일은 없도록 하자 -> OptionalInt, OptionalLong, OptionalDouble 이용
        예외) '덜 중요한 기본 타입'용인 Boolean, Byte, Character, Short, Float은 예외일 수 있다.

8️⃣ 적절하지 않은 경우
    1. 옵셔널을 맵의 값으로 사용하는 경우 -> 복잡성을 높여서 혼란과 오류 가능성을 키운다.
    2. 옵셔널을 컬렉션의 키, 값, 원소나 배열의 원소로 사용하는 게 적절한 상황은 거의 없다.

    cf. 필드 자체를 옵셔널로 선언한다?

📖 핵심 정리 : 값을 반환하지 못할 가능성이 있고, 호출할 때마다 반환값이 없을 가능성을 염두에 둬야 하는 메서드라면 옵셔널을 반환해야 할 상황일 수 있다. 하지만 옵셔널 반환에는
            성능 저하가 뒤따르니, 성능에 민감한 메서드라면 null을 반환하거나 예외를 던지는 편이 나을 수 있다. 그리고 옵셔널을 반환값 이외의 용도로 쓰는 경우는 매우 드물다.
