⭐️ 박싱된 타입보다느 기본 타입을 사용하라

1️⃣ 개요
  - 자바의 데이터 타입 구분
    1. 기본 타입 : int, double, boolean ...
      ㄴ 기본 타입에 대응하는 참조 타입 => 박싱된 기본 타입 : Integer, Double, Boolean ...
    2. 참조 타입 : String, List ...

  - 오토박싱과 오토언박싱 덕분에 두 타입을 크게 구분하지 않고 사용할 수 있지만, 그렇다고 차이가 사라지는 것은 아니다. 이 차이로 인해 사용에 주의해야 한다.


2️⃣ 기본 타입과 박싱된 기본 타입의 주된 차이점 세 가지
    1. 기본 타입은 값만 가지고 있으나, 박싱된 기본 타입은 값에 더해 식별성(identity)이란 속성을 갖는다.
        박싱된 기본 타입의 두 인스턴스는 값이 같아도 서로 다르다고 식별될 수 있다.
    2. 기본 타입의 값은 언제나 유효하나, 박싱된 기본 타입은 유효하지 않은 값, 즉 null을 가질 수 있다.
    3. 기본 타입이 박싱된 기본 타입보다 시간과 메모리 사용면에서 더 효율적이다.

3️⃣ 오류 상황
    1. 박싱된 기본 타입에 == 연산자를 사용하면 오류가 일어난다.
      ex.
        Comparator<Integer> naturalOrder = 
          (i, j) -> (i < j) ? -1 : (i == j ? 0 : 1);

    대안 : 실무에서 이와 같이 기본 타입을 다루는 비교자가 필요하다면 Comparator.naturalOrder()를 사용하자.
          비교자를 직접 만들면 비교자 생성 메서드나 기본 타입을 받는 정적 compare 메서드를 사용해야 한다.

          이 문제를 고치려면 지역변수 2개를 두어 각각 박시된 Integer 매개변수의 값을 기본 타입 정수로 저장한 다음, 모든 비교를 기본 탕비 변수로 수행해야 한다.
          이렇게 하면 오류의 원인인 식별성 검사가 이뤄지지 않는다.

        Comparator<Integer> naturalOrder = (iBoxed, jBoxed) -> {
            int i = iBoxed, j = jBoxed; // 오토박싱
            return i < j ? -1 : (i == j ? 0 : 1);
        }

    2. 기본 타입과 박싱된 기본 타입을 혼용한 연산에서는 박싱된 기본 타입의 박싱이 자동으로 풀린다. 그리고 null 참조를 언박싱하면 NullPointerException이 발생한다.
      해법 : i를 int로 선언해주면 끝이다.

    3. 박싱과 언박싱이 반복해서 일어나 체감될 정도로 성능이 느려진다.

4️⃣ 박싱된 기본 타입을 써야하는 경우
    1. 컬렉션의 원소, 키 값으로 쓴다.
        컬렉션은 기본 타입을 담을 수 없으므로 어쩔 수 없이 박싱된 기본 타입을 써야만 한다.
        더 일반화해서 말하면, 매개변수화 타입이나 매개변수화 메서드 타입 매개변수로는 박싱된 기본 타입을 써야 한다. 자바 언어가 타입 매개변수로 기본 타입을 지원하지 않기 때문.
        ex. ThreadLocal<int> (x) ThreadLocal<Integer> (o)
    2. 리플렉션(item 65)을 통해 메서드를 호출할 때도 박싱된 기본 타입을 사용해야 한다.

📖 핵심 정리 : 기본 타입과 박싱된 기본 타입 중 하나를 선택해야 한다면 가능하면 기본 타입을 사용하라. 기본 타입은 간단하고 빠르다. 박싱된 기본 타입을 써야 한다면 주의를 기울이자.
            오토박싱이 박싱된 기본 타입을 사용할 때의 번거로움을 줄여주지만, 그 위험까지 없애주지는 않는다. 두 박싱된 기본 타입을 == 연산자로 비교한다면 식별성 비교가 이뤄지는데,
            이는 여러분이 원한 게 아닐 가능성이 크다. 같은 연산에서 기본 타입과 박싱된 기본 타입을 혼용하면 언박싱이 이뤄지며, 언박싱 과정에서 NullPointerException을 던질 수 
            있다. 마지막으로, 기본 타입을 박싱하는 작업은 필요 없는 객체를 생성하는 부자용을 낳을 수 있다.
