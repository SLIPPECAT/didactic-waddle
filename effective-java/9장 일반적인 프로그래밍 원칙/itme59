⭐️ 라이브러리를 익히고 사용하라

1️⃣ 개요 : 무작위 정수 하나를 만들고 싶다고 하면 어떻게 만들 것인가?

2️⃣ 표준 라이브러리를 사용할 경우의 이점 다섯 가지
  1. 표준 라이브러리를 사용하면 그 코드를 작성한 전문가의 지식과, 앞엇 사용한 다른 프로그래머들의 경험을 활용할 수 있다.

    자바 7부터는 Random을 더 이상 사용하지 않는게 좋다.
    ThreadLocalRandom으로 대체하면 대부분 잘 작동한다. Random보다 더 고품질의 무자위 수를 생성할 뿐만 아니라 속도도 더 빠르다.
    System.out.println(ThreadLocalRandom.current().nextInt());


    포크=조인 풀이나 병렬 스트림에서는 SplittableRandom을 사용하라.

  2. 핵심저인 일과 크게 관련 없는 문제를 해결하느라 시간을 허비하지 않아도 된다.
  3. 따로 노력하지 않아도 성능이 지속해서 개선된다.
  4. 기능이 점점 많아진다.
  5. 작성한 코드가 많은 사람에게 낯익은 코드가 된다.

3️⃣ 많은 프로그래머가 표준 라이브러리의 기능보다 직접 구현해서 사용하는 이유?
  - 라이브러리에 그런 기능이 있는지 모르기 때문

  - 메이저 릴리스마다 주목할 만한 수많은 기능이 라이브러리에 추가된다.
    라이브러리가 너무 방대하여 모든 API 문서를 공부하기는 벅차겠지만 자바 프로그래머라면 적어도 java.lang, java.util, java.io와 그 하위 패키지들에는 익숙해져야 한다.
    다른 라이브러리들은 필요할 때마다 익히자.

  ex. 지정한 URL의 내용을 가져오는 명령줄 애플리케이션 (리눅스의 curl 명령어)
      public static void main(String[] args) throws IOException {
    		try (InputStream in = new URL(args[0]).openStream()) {
    			in.transferTo(System.out);
    		}
    	}

4️⃣ 언급해둘 만한 라이브러리
  1. 컬렉션 프레임워크와 스트림 라이브러리
  2. java.util.concurrent의 동시성 기능
      : 멀티스레드 프로그래밍 작업을 단순화해주는 고수준의 편의 기능, 능숙한 개발자가 자신만의 고수준 개념을 직접 구현할 수 있도록 도와주는 저수준 요소들을 제공한다. (item80, 81)

  우선 라이브러리를 사용하려 시도해보자. 어떤 영역의 기능을 제공하는지 살펴보고, 원하는 기능이 아니라 판단되면 대안을 사용하자.
  표준 라이브러리에서 원하는 기능을 찾지 못하면 그다음 선택지는 고품질의 서드파티 라이브러리가 될 것이다. ex. 구글의 구아바 라이브러리
  적합한 서드파티 라이브러리도 찾지 못했다면, 다른 선택이 없으니 직접 구현하자.

📖 핵심 정리 : 바퀴를 다시 발명하지 말자. 아주 특별한 나만의 기능이 아니라면 누군가 이미 라이브러리 형태로 구현해놓았을 가능성이 크다. 그런 라이브러리가 있다면 쓰면 된다.
            있는지 잘 모르겠다면 찾아보라. 일반적으로 라이브러리의 코드는 여러분이 직접 작성한 것보다 품질이 좋고, 점차 개선될 가능성이 크다. 여러분의 실력을 폄하하는 게 아니다.
            코드 품질에도 규모의 경제가 적용된다. 즉, 라이브러리 코드는 개발자 각자가 작성하는 것보다 주목을 훨씬 많이 받으므로 코드 품질도 그만큼 높아진다.
