⭐️ 최적화는 신중히 하라

☕️ 격언 세 가지 소개
    ✔️ (맹목적인 어리석음을 포함해) 그 어떤 핑계보다 효율성이라는 이름 아래 행해진 컴퓨팅 죄악이 더 많다. (심지어 효율을 높이지도 못하면서) - 윌리엄 울프
    
    ✔️ (전체의 97% 정도인) 자그마한 효율성은 모두 잊자. 섣부른 최적화가 만악의 근원이다. -도널드 크누스

    ✔️ 최적화를 할 때는 다음 두 규칙을 따르라.
      첫 번째, 하지 마라.
      두 번째, (전문가 한정) 아직 하지 마라. 다시 말해, 완전히 명백하고 최적화되지 않은 해법을 찾을 때까지는 하지 마라 - M.A. 잭슨
      + "각각의 최적화 시도 전후로 성능을 측정하라" - 조슈아 블로크

1️⃣ 개요
    성능 때문에 견고한 구조를 희생하지 말자. 빠르 프로그램보다는 좋은 프로그램을 작성하라.
    좋은 프로그램이지만 원하는 성능이 나오지 않는다면 그 아키텍처 자체가 최적화할 수 있는 길을 안내해줄 것이다.
    좋은 프로그램은 정보 은닉 원칙을 따르므로 개별 구성요소의 내부르 독립적으로 설계할 수 있다.
    따라서 시스템의 나머지에 영향을 주지 않고도 각 요소를 다시 설계할 수 있다(item15).

2️⃣ 설계 단계에서 성능을 반드시 염두해 두어야 한다.
    1. 성능을 제한하는 설계를 피하라.
        완성 후 변경하기 어려운 설계 요소는 컴포넌트끼리, 혹은 외부 시스템과의 소통 방식이다. ex. API, 네트워크 프로토콜, 영구 저장용 데이터 포맷 등

    2. API를 설계할 때 성능에 주는 영향을 고려하라.
        public 타입을 가변으로 만들면, 즉 내부 데이터를 변경할 수 있게 만들면 불필요한 방어적 복사를 수없이 유발할 수 있다.
        인터페이스도 있는데 굳이 구현 타입을 사용하는 것 역시 좋지 않다. 특정 구현체에 종속되게 하여, 나중에 더 빠른 구현체가 나오더라도 이용하지 못하게 된다.

    잘 설계된 API는 성능도 좋은 게 보통이다. 그러니 성능을 위해 API를 왜곡하는 건 매우 안 좋은 생각이다. (단단한 설계가 중요하다~)

    프로파일링 도구는 최적화 노력을 어디에 집중해야 할지 찾는 데 도움을 준다. 시스템 규모가 커질수록 프로파일러가 더 중요해진다.
    (건초더미가 거대해질수록 금속탐지기가 더 절실해진다.) 그 외에 jm도 언급해둘 만한 도구다.
    프롤파일러는 아니지만 자바 코드의 상세한 성능을 알기 쉽게 보여주는 마이크로 벤치마킹 플레임워크다.[JMH]

    최적화 시도 전후의 성능 측정은 C와 C++ 같은 전통적인 언어에서도 중요하지만, 성능 모델이 덜 정교한 자바에서는 중요성이 더욱 크다.
    자바는 다양한 기본 연산에 드는 상대적인 비용을 덜 명확하게 정의하고 있다.

    ❗️ 자바 소프트웨어 스택의 모든 요소가 훨씬 복잡해졌다. 프로세서부터 가상머신과 라이브러리, 그리고 자바가 수행되는 하드웨어 종류도 무척 다양해졌다.
      이런 모든 요소가 하나로 얽혀 자바 프로그램의 성능 예측을 2001년 당시보다 훨씬 어렵게 한다. 그에 비례해 측정의 중요성도 커졌다.

📖 핵심 정리: 빠른 프로그램을 작성하려 안달하지 말자. 좋은 프로그램을 작성하다 보면 성능을 따라오게 마련이다. 하지만 시스템을 설계할 때, 특히 AP, 네트워크 프로토콜,
            영구 저장용 데이터 포맷을 설계할 때는 성능을 염두에 두어야 한다. 시스템 구현을 완료했다면 이제 성능을 측정해보라. 충분히 빠르면 그것으로 끝이다.
            그렇지 않다면 프로파일러를 사용해 문제의 사용해 문제의 원인이 되는 지점을 찾아 최적화를 수행하라. 가장 먼저 어떤 알고리즘을 사용했는지를 살펴보라.
            알고리즘을 잘못 골랐다면 다른 저수준 최적하는 아무리 해봐야 소용이 없다. 만족할 때까지 이 과정을 반복하고, 모든 변경 후에는 성능을 최적화하라.

  
