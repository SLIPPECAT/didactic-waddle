⭐️ 일반적으로 통용되는 명명 규칙을 따르라

1️⃣ 철자 규칙

    - 타입 매개변수 이름은 보통 한 문자로 표현한다. 대부분은 다음의 다섯가지 중 하나다.
        1. T : 임의이 타입
        2. E : 컬렉션 원소 타입
        3. K, V : 맵의 키와 값
        4. X : 예외
        5. R : 메서드 반환 타입

        그 외의 타입의 시퀀스에는 T, U, V 혹은 T1, T2, T3를 사용한다.

    | 식별자 타입 |                      예                      |
    | 패키지와 모듈 | org.junit.jupiter.api |
    | 클래스와 인터페이스 | Stream, FutureTask, LinkedHashMap |
    | 메서드와 필드 | remove, groupingBy, getCrc |
    | 상수 필드 | MIN_VALUE, NEGATIVE_INFINITY |
    | 지역 필드 | i, denom, houseNum |
    | 타입 매개변수 | T, E, K, V< X, R, U, V, T1, T2 |

2️⃣ 문법 규칙
    - 문법 규칙은 철자 규칙과 비교하면 더 유연하고 논란도 많다. 페키지에 대한 규칙은 따로 없다.

    ❓클래스
    1. 객체를 생성할 수 있는 클래스(열거 타입 포함)의 이름은 보통 단수 명사나 명사구를 사용한다. ex. Thread, PriorityQueue
    2. 객체를 생성할 수 없는 클래스(item4)의 이름은 보통 복수형 명사로 짓는다. ex. Collectors, Collections 등
    3. 인터페이스 이름은 클래스와 똑같이 짓거나 (Collection, Comparator 등), able 혹은 ible로 끝나는 형용사로 짓는다. ex. Runnable, Iterable
    4. 애너테이션은 워낙 다양하게 활용되어 지배적인 규칙 없이 명사, 동사, 전치사, 형용사가 두루 쓰인다. ex. BindingAnnotation, Inject

    ❓ 메서드
    1. 어떤 동작을 수행하는 메서드의 이름은 동사나 (목적어를 포함한) 동사구로 짓는다. ex. append, drawImage
    2. boolean 값을 반환하는 메서드라면 보통 is나 (드물게) has로 시작하고 명사나 명사구, 혹은 형용사로 기능하는 아무 단어나 구로 끝나도록 짓는다.
       ex. isDigit, isProbablePrime, isEmpty
    3. 반환 타입이 boolean이 아니거나 해당 인스턴스의 속성을 반환하는 메서드의 이름은 보통 명사, 명사구 혹은 get으로 시작하는 동사구로 짓는다. (size, hashCode, getTime 등)

3️⃣ 특별한 메서드 이름
    1. 객체의 타입을 바꿔서 다른 타입의 또 다른 객체를 반환하는 인스턴스 메서드의 이름을 보통 toType 형태로 짓는다. ex. toString, toArray 등
    2. 객체의 내용을 다른 뷰로 보여주는 메서드 (item6)의 이름은 asType 형태로 짓는다. (asList 등).
    3. 객체의 값을 기본 타입 값으로 반환하는 메서드의 이름은 보통 typeValue 형태로 짓는다. ex. intValue 등
    4. 정적 팩터리의 이름은 다양하지만 from, of, valueOf, instance, getInstance, newInstance, getType, newType(itme1)을 흔히 사용한다.

4️⃣ 필드 이름에 관한 문법 규칙
    1. boolean 타입의 필드 이름은 보통 boolean 접근자 메서드에서 앞 단어를 뺀 형태다. ex. initialized, composite 등
    2. 다른 타입의 필드라면 명사나 명사구를 사용한다 (height, digits, bodyStyle 등)
        지역변수 이름도 필드와 비슷하게 지으면 되나, 조금 더 느슨하다.

📖 핵심 정리: 표준 명명 규칙을 체화하여 자연스럽게 베어 나오도록 하자. 철자 규칙은 직관적이라 모호한 부분이 적은 데 반해, 문법 규칙은 더 복잡하고 느슨한다.
            자바 언어 명세 [JLS]의 말을 인용하자면 "오랫동안 따라온 규칙과 충돌한다면 그 규칙을 맹종해서는 안 된다." 상식이 이끄는 대로 따르자.

