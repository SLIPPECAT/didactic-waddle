⭐️ 리플렉션보다는 인터페이스를 사용하라

1️⃣ 개요: 리플렉션 기능(java.lang.reflect)을 이용하면 프로그램에서 임의의 클래스에 접근할 수 있다.
        컴파일 당시에 존재하지 않던 클래스도 이용할 수 있다.

        Class 객체가 주어지면 그 클래스의 생성자, 메서드, 필드에 해당하는 Constructor, Method, Field 인스턴스를 가져올 수 있고, 이어서 이 인스턴스들로는
        그 클래스의 멤버 이름, 필드 타입, 메서드 시그니처 등을 가져올 수 있다.

        나아가 Constructor, Method, Field 인스턴스를 이용해 각각에 연결된 실제 생성자, 메서드, 필드를 조작할 수 있다.
        이 인스턴스들을 통해 해당 클래스의 인스턴스를 생성하거나, 메서드를 호출하거나, 필드에 접근할 수 있다는 뜻이다.

        ex. Method.invoke는 어떤 클래스의 어떤 객체가 가진 어떤 메서드라도 호출할 수 있게 해준다. (일반적인 보안 제약사항을 준수해야 한다.)

2️⃣ 리플렉션의 단점
    1. 컴파일타임 타입 검사가 주는 이점을 하나도 누릴 수 없다. 예외 검사도 마찬가지다.
        프로그램이 리플렉션 기능을 써서 존재하지 않는 혹은 접근할 수 없는 메서드를 호출하려 시도하면 런타임 오류가 발생한다.

    2. 리플렉션을 이용하면 코드가 지저분하고 장황해진다.

    3. 성능이 떨어진다.

4️⃣ 리플렉션의 사용
    - 아주 제한된 형태로만 사용해야 그 단점을 피하고 이점만 취할 수 있다.

    - 리플렉션은 인스턴스 생성에만 쓰고, 이렇게 만든 인스턴스는 인터페이스나 상위 클래스로 참조해 사용하자.

    - 드물긴 하지만, 리플렉션은 런타임에 존재하지 않을 수도 있는 다른 클래스, 메서드, 필드와의 의존성을 관리할 때 적합하다.
        이 기법은 버전이 여러 개 존재하는 외부 패키지를 다룰 때 이 기법은 유용하다.

📖 핵심 정리: 리플렉션은 복잡한 특수 시스템을 개발할 때 필요한 강력한 기능이지만, 단점도 많다. 컴파일타임에는 알 수 없는 클래스를 사용하는 프로그램을 작성한다면 리플렉션을 사용해야
        할 것이다. 단, 되도록 객체 생서에만 사용하고, 생성한 객체를 이용할 때는 적절한 인터페이스나 컴파일타임에 알 수 있는 상위 클래스로 형변환해 사용해야 한다.
