⭐️ 직렬화된 인스턴스 대신 직렬화 프록시 사용을 검토하라

1️⃣ 개요
    - Serializable을 구현하기로 결정한 순간 언어의 정상 메커니즘인 생성자 이외의 방법으로 인스턴스를 생성할 수 있게 된다.
      버그와 보안 문제가 일어날 가능성이 커진다. 하지만 직렬화 프록시 패턴(serialization proxy pattern)을 사용하면 위험을 크제 줄일 수 있다.

2️⃣ 직렬화 프록시 패턴
    - 먼저, 바깥 클래스의 논리적 상태를 정밀하게 표현하는 중첩 클래스를 설계해 private static으로 선언한다. 이 중첩 클래스가 바로 바깥 클래스의 직렬화 프록시다.
    - 중첩 클래스의 생성자는 단 하나여야 하며, 바깥 클래스를 매개변수로 받아야 한다. 이 생성자는 단순히 인수로 넘어온 인스턴스의 데이터를 복사해야 한다.

    ✔️ 일관성 검사나 방어적 복사도 필요 없다. 설계상, 직렬화 프록시의 기본 직렬화 형태는 바깥 클래스의 직렬화 형태로 쓰기에 이상적이다.

    - 그리고 바깥 클래스와 직렬화 프록시 모두 Serializable을 구현한다고 선언해야 한다.
    
3️⃣ 직렬화 프록시 패턴의 한계 두 가지
    1. 클라이언트가 멋대로 확장할 수 있는 클래스(item19)에는 적용할 수 없다.
    2. 객체 그래프에 순환이 있는 클래스에도 적용할 수 없다.

    방어적 복사보다 느릴 수 있다.

📖 핵심 정리
    - 제 3자가 확장할 수 없는 클래스라면 가능한 한 직렬화 프록시 패턴을 사용하자.
      중요한 불변식을 안정적으로 직렬화해주는 가장 쉬운 방법일 것이다.
    
