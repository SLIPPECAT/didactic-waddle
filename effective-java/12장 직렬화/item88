⭐️ readObject 메서드는 방어적으로 작성하라

1️⃣ 개요
    - readObject 메서드가 실질적으로 또 다른 public 생성자이기 때문에 다른 생성자와 똑같은 수준으로 주의를 기울여야 한다.
    - readObject 메서드에도 인수가 유효한지 검사해야 하고(itme49) 필요하다면 매개변수를 방어적으로 복사해야 한다.(item50)
      readObject가 이 작업을 제대로 작성하지 못하면 공격자는 아주 손쉽게 해당 클래스의 불변식을 깨뜨릴 수 있다.
    - 쉽게 말해 redObject는 매개변수로 바이트 스트림을 받는 생성자라 할 수 있다.

2️⃣ 방어적 복사와 유효성 검사를 수행하는 readObject 메서드
    private void readObject(ObjectInputStream s) {
        s.defaultReadObject();

        // 가변 요소들을 방어적으로 복사한다.
        start = new Date(start.getTime());
        end = new Date(end.getTime());

        // 불변식을 만족하는지 검사한다.
        if (start.compareTo(end) > 0){
            throw new InvalidObjectException(start + " after " + end);
        }
    }

3️⃣ 기본 readObject 메서드를 써도 좋을지를 판단하는 방법
    - transient 필드를 제외한 모든 필드의 값을 매개변수로 받아 유효성 검사 없이 필드에 대입하는 public 생성자를 추가해도 괜찮은가?
      에 대한 답이 "아니오"라면 커스텀 readObject 메서드를 만들어 (생성자에서 수행했어야 할) 모든 유효성 검사와 방어적 복사를 수행해야 한다.

    - 직렬화 프록시 패턴(Item90)을 사용하는 방법도 있다. 이 패턴은 역직렬화를 안전하게 만드는 데 필요한 노력을 상당히 경감주어 적극 권장한다.

📖 핵심 정리
    - readObject 메서드를 작성할 때는 언제나 public 생성자를 작성하는 자세로 임해야 한다.
      readObject는 어떤 바이트 스트림이 넘어오더라도 유효한 인스턴스를 만들어내야 한다. 바이트 스트림이 진짜 직렬화된 인스턴스라고 가정해서는 안 된다.
      커스텀 직렬화를 사용하더라도 모든 문제가 그대로 발생할 수 있다.

    - readObject 메서드를 작성하는 지침
      1. private이어야 하는 객체 참조 필드는 각 필드가 가리키는 객체를 방어적으로 복사하라. 불변 클래스 내의 가변 요소가 여기 속한다.
      2. 모든 불변식을 검사하여 어긋나는 게 발견되면 InvalidObjectException을 던진다. 방어적 복사 다음에는 반드시 불변식 검사가 뒤따라야 한다.
      3. 역직렬화한 후 객체 그래프 전체의 유효성을 검사해야 한다면 ObjectInputValidation 인터페이스를 사용하라
      4. 직접적이든 간접적이든, 재정의할 수 있는 메서드는 호출하지 말자.
