⭐️ Serializable을 구현할지는 신중히 결정하라

1️⃣ 개요 :클래스 선언에 implements Serializable만 덧붙이면 어떤클래스의 인스턴스를 직렬화할 수 있다. 직렬화를 지원하기란 쉬워 보이지만 길게 보면 아주 값비싼 일이다.

2️⃣ 문제1. Serializable을 구현하면 릴리스한 뒤에는 수정하기 어렵다.
    클래스가 Serializable을 구현하면 직렬화된 바이트 스트림 인코딩(직렬화 형태)도 하나의 공개 API가 된다. 

    직렬화 가능 클래스를 만들고자 한다면, 길게 보고 감당할 수 있을 만큼 고품질의 직렬화 형태도 주의해서 함꼐 설계해야 한다. (item 87, item90)

    ex. 직렬 버전 UID

3️⃣ 문제2. 버그와 보안 구멍이 생길 위험이 높아진다.

4️⃣ 문제3. 해당 클래스의 신버전을 릴리스할 때 테스트할 것이 늘어난다.
    - 양방향 직렬화/역직렬화가 모두 성공하고, 원래의 객체를 충실히 복제해내는지를 반드시 확인해야 한다.

5️⃣ Serializable의 구현
    - BigInteger와 Integer 같은 '값' 클래스와 컬렉션 클래스
    - 상속용으로 설계된 클래스 중 Thrwoable, Component
    - 정벅 멤버 클래스

6️⃣ Serializable 미구현
    - 스레드 풀처럼 '동작'하는 객체를 표현하는 클래스
    - 상속용으로 설계된 대부분 클래스, 대부분 인터페이스
    - 내부 클래스 (내부 클래스에 대한 기본 직렬화 형태는 분명하지가 않다.)

📖 핵심 정리
    - Serializable은 구현한다고 선언하기는 쉽지만, 그것은 눈속임이다. 한 클래스의 여러 버전이 상호작용할 일이 없고 서버가 신뢰할 수 있는 데이터에 노출될 가능성이 없는 등,
      보호된 환경에서만 쓰일 클래스가 아니라면 Serializable 구현은 신중하게 이뤄져야 한다. 상속할 수 있는 클래스라면 주의사항이 더욱 많아진다.
    
