빅데이터와 분산시스템이라는 패러다임 변화

실시간에 가까운 전문 검색, 멀티테넌시 지원, NoSQL 저장소의 역할
단순 검색 엔진의 기능 + 데이터 수집, 저장, 분석, 시각화

2.1. 엘라스틱서치를 구성하는 개념
2.1.1 인엑스, 타입, 문서, 필드 구조로 구성된다.

인덱스
인덱스는 데이터 저장 공간이다.
하나의 타입만 가지며 하나의 물리적인 노드에 여러 개의 논리적인 인덱스를 생성할 수 있다.
검색 시 인덱스 이름으로 문서 데이터를 검색하며, 여러 개의 인덱스를 동시에 검색할 수 있다.

인덱스 생성시 5개의 프라이머리 샤드아 1개의 레플리카 샤드 세트를 생성한다.

인덱스의 이름은 모두 소문자여야 하며 추가, 수정, 삭제, 검색은 RESTful API로 수행할 수 있다.
만약 인덱스가 없는 상태애서 데이터가 추가된다면 데이터를 이용해 인덱스가 자동 생성된다.

샤드
색인된 문서는 하나의 인덱스에 담긴다. 인덱스 내부에 색인된 데이터는 물리적 공간에 여러 개의 파티션으로 나뉘어 구성되는데
이 파티션을 엘라스틱서치에서는 샤드라고 부른다. 엘라스틱서치는 다수의 샤드로 문서를 분산 저장하고 있어 데이터 손실 위험을 최소화할 수 있다.

타입
인덱스의 논리적 구조를 의미, 인덱스의 속성에 따라 분류 가능

문서
엘라싙ㄱ서치에서 데이터가 저장되는 최소 단위

필드
필드는 문서를 구성하기 위한 속성. 일반적으로 데이터베이스의 칼럼과 비교할 수 있으나 칼럼이 정적인 데이터 타입인 데 반해 필드는 좀 더 동적인 데이터 타입이다.

매핑
매핑은 문서의 필드와 필드의 속성을 정의하고 그에 따른 색인 방법을 정의하는 프로세스
여러가지 데이터 타입을 지정할 수 있지만, 필드명은 중복해서 사용할 수 없다.

2.1.2 노드의 종류
마스터 노드
데이터 노드
코디네이팅 노드
인제스트 노드

2.1.3 클러스터, 노드, 샤드

클러스터의 동작 방식(3개의 노드로 구성)

ex1. 프라이머리 샤드 3개, 레플리카 샤드 0세트 구성
샤드는 분산된 데이터에 따라 순차적인 번호를 가집니다.
일반적으로 프라이머리 샤드는 안정성을 위해 하나의 노드에 하나씩 분산 저장됩니다.
인덱스에 다수의 문서를 색인하게 되면 문서는 3개의 샤드로 골고루 분산 저장됩니다.
노드 3개에 샤드 각 1개씩 배정

ex2. 프라이머리 샤드 6개, 레플리카 샤드 0세트 구성
노드 3개에 샤드 각 2개씩 배정 (더 잘게 쪼개져서 저장)

ex3. 프라이머리 샤드 3개, 레플리카 샤드 1세트 구성
레플리카 샤드 세트를 설정했으므로 3개의 레플리카 샤드가 생성된다.
엘라스틱서치는 장애시 레플리카 샤드를 이용해 샤드를 복구한다.
물리적인 노드 하나가 죽더라도 나머지 노드 2개가 전체 데이터를 복구할 수 있다.

장애가 발생하면 마스터 노드는 데이터를 재분배하거나 레플리카 샤드를 프라이머리 샤드로 승격시켜 서비스 중단 없는 복구가 가능해진다.
장애극복 상황을 염두에 두고 노드와 샤드의 수를 적절히 구성해야 한다.

2.2 엘라스틱서치에서 제공하는 주요 API

API의 종류
엘라스틱서치는 RESTful 방식의 API를 제공하며, 이를 통해 JSON 기반으로 통신한다. (기본포트 9200)

엘라스틱서치에서는 다음과 같은 주요 API를 제공한다.
-인덱스 관리
-문서 관리
-검색 API
-집계 API

문서를 색인하기 위해서는 기본적으로 인덱스라는 그릇을 생성해야 한다. 인덱스를 통해 입력되는 문서의 필드를 정의하고 각 필드에 알맞은 데이터 타입을 지정할 수 있다.
이런 과정을 통해 좀 더 효율적인 색인이 가능해진다.

index vs indices
색인은 데이터가 토큰화되어 저장된 자료구조를 의미하며, index라는 단어를 번역한 것이다. 하지만 엘라스틱서치에서는 인덱스라는 용어를 색인과 다른 의미로 사용한다.

index: 색인 데이터
indexing: 색인 과정
indicies: 매핑 정보를 저장하는 논리적인 데이터 공간

색인을 의미할 경우: index라는 용어를 사용, 매핑 정의 공간을 의미할 경우 indicies라는 단어로 표현한다.

엘라스틱서치는 사용 편의성을 위해 스키마리스라는 기능을 제공한다. 문서를 색인하기 위해서 기본적으로 인덱스를 생성하는 과정이 필요한데
인덱스를 생성하는 과정 없이 문서를 추가하더라도 문서가 색인되도록 지원하는 일종의 편의 기능이다. 엘라스틱서치는 최초 문서가 색인될 때
인덱스의 존재 여부를 확인하고 만약 인덱스가 존재하지 않는다면 문서를 분석해서 문서가 색인될 수 있게 인덱스를 자동으로 생성한다.

스키마리스 기능은 가급적이면 사용하지 말자
엘라스틱 서치는 스키마리스 기능을 이용하여 다양한 형태의 비정형 데이터를 하나의 인덱스로 구성할 수 있다.
하지만 이는 성능과 밀접환 연관이 있기 때문에 특수한 상황에서만 사용해야 한다. 만약 스키마리스를 사용해야 한다면 데이터 구조 및 검색 방식을
확실히 이해해야 한다.

인덱스를 자동 생성할 경우 특정 단어를 검색할 때 검색 결과에서 누락되는 등 문제가 발생할 가능성이 높아진다.
기본적으로 모든 필드가 text 타입과 keyword 타입을 동시에 제공하는 멀티피르 기능으로 구성된다.
하지만 특정 필드는 text 타입만 필요할 수도 있고 keyword 타입만 필요할 수도 있을 것이다. 이러한 경우 데이터 공간의 낭비를 초래한다.

엘라스틱서치의 스키마리스 특성은 특수한 상황에서만 제한적으로 사용해야 하며 사실상 실무에서는 대부분 사용하지 않는다.

원하는 결과를 얻기 위해서는 한글 형태소를 분석하는 분석기를 사용하도록 데이터 타입을 직접 정의해야 한다.
따라서 원하는 결과를 얻기 위해서라도 스키마리스 방식의 사용을 지양하고 반드시 인덱스를 직접 정의해서 사용하는 습관을 들이는 것이 좋다.


참고
스키마리스 기능을 명시적으로 사용하지 않도록 설정하는 것이 가능하다.
노드 설정 파일에서 action.auto_create_index: false 설정할 경우 자동으로 인덱스가 생성되지 않는다.
또한 인덱스 별로 제공되는 index.mapper.dynamic 설정을 false로 설정하면 특정 칼럼의 자동 매핑 생성을 피활성화할 수 있다.

2.2.1 인덱스 관리 API
인덱스 관리 API는 인덱스 관리를 위한 API다. 이를 이용해 인덱스를 추가하거나 삭제할 수 있다.
인덱스 관리 API는 HTTP 메서드를 지정하는 방식을 통해 사용할 수 있다.

인덱스 생성
매핑: 문서와 문서에 포함된 필드, 필드 타입 등을 세세하게 지정하는 것이 가능한 설정 (매핑 정보는 변경할 수 없으며, 만약 잘못 생성했거나 변경해야 하는 경우
데이터를 삭제하고 다시 색인하는 수밖에 없다.)

keyword: 단순 문자열 저장
text: 형태소 분석이 필요한 경우ㄹ
한글 영화 이름, 영문 영화 이름 -> text타입
영화코드, 제작연도 -> 숫자 데이터 타입
개봉일 -> 날짜 타입
그 밖의 필드 타입 -> keyword 타입

인덱스 삭제
인덱스는 한번 삭제하면 다시는 복구할 수 없기 때문에 인덱스 삭제는 신중해 해야 한다.

2.2.2 문서 관리 API
문서 관리 API는 실제 문서를 색인하고 조회, 수정, 삭제를 지원하는 API다. 이를 이용해 문서를 색인하고 내용을 수정하거나 삭제할 수 있다.
엘라스틱서치는 기본적으로 검색엔진이기 때문에 검색을 위해 다양한 검색 패턴을 지원하는 Search API를 별도로 제공한다.
하지만 색인된 문서의 ID를 기준으로 한 건의 문서를 다뤄야 하는 경우 문서 관리 API를 사용한다.

문서 관리 API의 기능
- Index API: 한 건의 문서를 색인
- Get API: 한 건의 문서를 조회
- Delete API: 한 건의 문서를 삭제
- Update API: 한 건의 문서를 업데이트

문서 관리 API는 한 건의 문서를 처리하기 위한 기능을 제공, Single document API라고도 한다.
하지만 클러스터를 운영하다 보면 다수의 문서를 처리해야 하는 경우도 종조 발생할 것이다. 이러한 경우에 대비해 Multi-document API도 제공한다.
- Multi Get API: 다수의 문서 조회
- Bulk API: 대량의 문서 확인
- Delete By Query API: 다수의 문서를 삭제
- Update By Query API: 다수의 문서를 업데이트
- nReindex API : 인덱스의 문서를 다시 색인

문서 생성, 조회, 삭제

Id를 지정하지 않고 문서를 생성
id값을 지정하지 않을 경우 UUID를 통해 id값이 무작위로 생성된다.
색인된 문서의 id값은 업데이트를 고려해서 데이터베이스 테이블의 식별 값과 맞춰 주는 것이 중요하다.

2.2.3 검색 API
방식1. HTTP URI 형태의 파라미터를 URI에 추가해서 검색하는 방법
방식2. RESTful API 방식인 QueryDSL을 사용해 요청 본문(RequestBody)에 질의 내용을 추가해 검색하는 방법

RequestBody 방식은 URI 방식보다 제약사항이 적기 때문에 현업에서는 RequestBody 방식을 선호한다.
URI 방식은 간단한 쿼리 검색을 하거나 디버깅할 때 간편하게 사용하는 경우에 종종 이용된다.

QueryDSL을 사용하면 가독성이 높고, JSON 형식으로 다양한 표현이 가능해진다.
Query 조건을 여러 개 만들거나, 통계를 위한 집계 쿼리 등 복잡한 쿼리를 작성하려면 QueryDSL을 사용하는 것이 좋다
URI로 여러 단계의 구조를 가지는 중첩된 형태 표현하는 것은 불가능하기 때문이다.

URI 방식의 검색 질의

Request Body 방식의 검색 질의
URI 검색 질의는 여러 필드를 각기 다른 검색어로 질의하는 것이 어렵다. 쿼리 조건이 복잡하고 길어지기 때문이다.
이럴 때, JSON 방식으로 질의하는 게 좋다. 매우 복잡한 쿼리도 쉽게 표현할 수 있고 여러 조건을 한 번에 처리할 수 있다.
URI 쿼리를 JSON 포맷에 맞게 변경하면 된다.

2.2.4 집계 API
과거의 통계작업: 루씬이 제공하는 패싯 기능을 많이 활용
패싯 기능은 기본적으로 디스크 기반, 분산 환경에는 최적화 되지 않ㄴ음, 대용량 데이터 통계 작업에 적합하지 않음

쿼리에 사용되는 집계에 따라 수치를 계산하고 동적으로 카운팅하거나 히스토그램 같은 작업 등도 할 수 있게 바뀜.
엘라스틱서치의 집계 API는 각종 통계 데이터를 실시간으로 제공할 수 있는 강력한 기능이다.

데이터 집계

데이터 집계 타입
집계 기능은 현재 4가지 API로 제공된다. 집계 기능은 서로 조합해 사용할 수 있으며 이를 조합해서 매우 강력한 기능을 제공할 수 있다.
- 버킷 집계: 집계 중 가장 많이 사용, 문서의 필드를 기준으로 버킷을 집계한다.
- 메트릭 집계: 문서에서 추출된 값을 가지고 Sum, Max, Min, Avg를 계산한다.
- 매트릭스 집계: 행렬의 값을 합하거나 곱한다.
- 파이프라인 집계: 버킷에서 도출된 결과 문서를 다른 필드 값으로 재분류한다. 즉 다른 집계에 의해 생성된 출력 결과를 다시 한 번 집계한다. 집계가 패싯보다 강력한 이유다.




























