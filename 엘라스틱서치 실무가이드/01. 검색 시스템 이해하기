01 검색 시스템 이해하기

1.1 검색 시스템의 이해

1.1.1 검색 시스템이란?
사용자가 원하는 검색어에 대한 겨로가를 제공하는 검색 서비스
우리는 검색 서비스를 검색 엔진, 검색 시스템, 검색 서비스 등으로 부른다.

검색엔진은 광활한 웹에서 정보를 수집해 검색 결과를 제공하는 프로그램이다.

검색 시스템은 대용량 데이터를 기반으로 신뢰성 있는 검색 결과를 제공하기 위해 검색 엔진을 기반으로 구축된 시스템을 통칭하느 용어이다.
수집기를 이용해 방대한 데이터를 수집하고 이를 다수의 검색엔진을 이용해 색인하고 검색 결과를 UI로 제공한다.
시스템 내부의 정책에 따라 관련도가 높은 문서를 검색 결과의 상위에 배치할 수 있을뿐더러 특정 필드나 문서에 가중치를 둬서 검색의 정확도를 높일 수 있다.

검색 서비스는 검색엔진을 기반으로 구축한 검색 시스템을 활용해 검색 결과를 서비스로 제공합니다.

엘라스틱 서치는 검색 엔진이며 엘라스틱 서치를 이용해 검색 시스템을 구축할 것이다.

1.1.2 검색 시스템의 구성 요소
일반적으로 정보를 수집하는 수집기, 수집할 데이터를 저장하는 스토리지, 수집한 데이터를 검색에 적절한 형태로 변환하는 색인기, 색인된 데이터에서 일치하는 문서를 찾는 검색기로 구성된다.

수집기
수집기는 웹사이트, 블로그, 카페 등 웹에서 필요한 정보를 수집하는 프로그램이다. 크롤러, 스파이더, 웜, 웹 로봇 등으로 불린다.

스토리지
데이터베이스에서 데이터를 저장하는 물리적인 저장소다. 검색엔진은 색인한 데이터를 스토리지에 보관한다.

색인기
검색엔진이 수집한 정보에서 사용자 질의와 일치하는 정보를 찾으려면 수집된 데이터를 검색 가능한 구조로 가공하고 저장해야 한다. 그 역할을 하는 것이 색인기다.
색인기는 다양한 형태소 분석기를 조합해 정보에서 의미가 있는 용어를 추출하고 검색에 유리한 역색인 구조로 데이터를 저장한다.

검색기
검색기는 사용자 질의를 입력받아 색인기에서 저장한 역색인 구조에서 일치하는 문서를 찾아 결과로 반환한다. 질의와 문서가 일치하는지는 유사도 기반의 검색 순위 알고리즘으로 판단한다.
검색기 또한 색인기와 마찬가지로 형태소 분석기를 이용해 사용자 질의에서 유의미한 용어를 추출해 검색한다. 따라서 사용하는 형태소 분석기에 따라 검색 품질이 달란진다.

1.1.3 관계형 데이터베이스와의 차이점
검색엔진을 설명할 때 항상 비교되는 것이 관계형 데이터베이스이다. 두 가지 모두 질의와 일치하는 데이터를 찾아 사용자에게 제공한다는 점에서 유사점이 많기 때문이다.
하지만 관계형 데이터베이스로 검색 기능을 제공하는 데는 많은 문제점이 있다.

데이터베이스는 데이터를 통합 관리하는 데이터의 집합이다. 저장 방식에 따라 크게 관계형 또는 계층형 데이터베이스로 나뉜다.
모든 데이터는 중복을 제거하고 정형 데이터로 구조화해 행과 열로 구성된 테이블에 저장된다. SQL문을 이용해 원하는 정보의 검색이 가능한데 텍스트 매칭을 통한 단순한 검색만 가능하다.
텍스트를 여러 단어로 변형하거나 여러 개의 동의어나 유의어를 활용한 검색은 불가능하다.

반면 검색엔진은 데이터베이스에서는 불가능한 비정형 데이터를 색인하고 검색할 수 있다.
형태소 분석을 통해 사람이 구사하는 자연어 처리가 가능해지고 역색인 구조를 바탕으로 빠른 검색 속도를 보장합니다.

엘라스틱서치: 인덱스, 샤드, 타입, 문서, 필드, 매핑, Query DSL
관계형 데이터베이스: 데이터베이스, 파티션, 테이블, 행, 열, 스키마, SQL

엘라스틱서치의 인덱스는 관계형 데이터베이스의 데이터베이스와 비슷한 문서의 모음을 뜻합니다.
엘라스틱서치의 타입은 데이터베이스의 테이블과 같은 역할을 한다.
엘라스틱 서치는 하나의 행을 문서라고 부르며, 해당 문서는 데이터베이스 테이블의 한 행을 의미한다.
또한 엘라스틱서치의 매핑은 필드의 구조와 제약조건에 대한 명세를 말하며 이에 대응하는 관계형 데이터베이스의 개념을 스키마라 한다.

관계형 데이터베이스와 엘라스틱서치는 인덱스라는 개념을 다르게 사용한다. 엘라스틱 서치의 인덱스는 앞에서 설명했지만
관계형 데이터베이스에서의 인덱스는 WHERE 절의 쿼리와 JOIN을 빠르게 만드는 보조 데이터 도구로 사용된다.

엘라스틱서치와 데이터베이스는 데이터의 추가, 수정, 삭제, 방식에도 차이가 있다. 엘라스틱서치는 기본적으로 HTTP를 통해 RESTful API를 이용합니다.
엘라스틱서치는 자바로 개발됐지만 여러가지 프로그래밍 언어를 통해 활용할 수 있습니다.

엘라스틱서치에서 사용하는 HTTP 메서드 (데이터 조회 GET, 데이터 생성 PUT, 인덱스 업데이트, 데이터 조회 POST, 데이터 삭제 DELETE, 인덱스의 정보 확인 HEAD)
데이터베이스 질의 문법 (SELECT, INSERT, UPDATE, SELECT, DELETE)

RESTful API는 HTTP 헤더와 URL만 사용해 다양한 형태의 요청을 할 수 있는 HTTP 프로토콜을 최대한 활용하도록 고안된 아키텍처다.

SQL문 : SELECT * FROM USER WHERE Name like '%가마돈%" -> row 출력
Search API : GET http://localhost9200/user/_search?q=Name:가마돈

like절로 찾을 경우 대소문자도 일치해야 찾아올 수 있다. 엘라스틱 서치의 경우 역색인되는 문자열 전체에 대해 소문자 혹은 대문자로 생성되어 있다.
쿼리가 들어오는 필터를 색인 시간과 검색 시간에 동일하게 지정한다면 해당하는 쿼리에 어떤 문자열이 들어와도 검색이 가능해진다.
엘라스틱서치의 특강점 중 하나는 구조화되지 않은 비정형 데이터도 검색이 가능해진다는 점이다. 데이터베이스는 스키마를 미리 정의해야만 데이터 저장과 조회가 가능한 반면
엘라스틱서치는 구조화되지 않은 데이터까지 스스로 분석해 자동으로 필드를 생성하고 저장한다.

1.2 검색 시스템과 엘라스틱 서치

요즘에는 대량의 데이터를 빠르게 검색하기 위해 NoSQL을 많이 사용한다.
엘라스틱서치도 NoSQL의 일종으로서 분류가 가능하고 분산 처리를 통해 실시간에 준하는 빠른 검색이 가능하다. 기존 데이터베이스로는 처리하기 어려운 대량의 비정형 데이터도
검색할 수 있으며 전문 검색과 구조 검색 모두를 지원한다. 기본적으로는 검색엔진이지만 MongoDB나 Hbase처럼 대용량 스토리지로도 활용할 수 있다.

1.2.1 엘라스틱서치가 강력한 이유

오픈소스 검색엔진
엘라스틱서치는 아파치 재단의 루씬을 기반으로 개발된 오프소스 검색에닞ㄴ이다.

전문 검색
PostgreSQL, MongoDB 같은 대부분의 데이터베이스는 기본 쿼리 및 색인 구조의 한계로 인해 기본적인 검색 기능만 제공한다.
하지만 엘라스틱서치는 좀 더 고차원적인 전문 검색(Full Text)이 가능하다.
전문 검색이란 내용 전체를 색인해서 특정 단어가 포함된 문서를 검색하는 것을 말한다. 기존 관계형 데이터베이스는 전문 검색에 적합하지 않지만 엘라스틱서치는 다양한 기능별,
언어별 플러그인을 조합해 빠르게 검색할 수 있다.

통계 분석
비정형 로그 데이터를 수집하고 한곳에 모아 통계 분석을 할 수 있다. 엘라스틱서치와 키바나를 연결하면 실시간으로 쌓이는 로그를 시각화하고 분석할 수 있다.

스키마리스(Schemaless)
데이터베이스는 스키마라는 구조에 따라 데이터를 적합한 형태로 변경해서 저장하고 관리한다. 반면 엘라스틱서치는 정형화되지 않은 다양한 형태의 문서로도 자동으로 색인하고 검색할 수 있다.

RESTful API
엘라스틱서치는 HTTP 기반의 RESTful API를 지원하고 요청뿐 아니라 응답에도 JSON 형식을 사용해 개발 언어, 운영체제, 시스템 관계없이 이기종 플랫폼에서도 이용이 가능합니다.

멀티테넌시(Multi-tenancy)
서로 상이한 인덱스일지라도 검색할 필드명만 같으면 여러 개의 인덱스를 한번에 조회할 수 있습니다. 이를 이용해 멀티테넌시 기능을 제공할 수 있습니다.
멀티테넌시(Multitenancy)는 하나의 시스템 또는 애플리케이션에서 여러 개의 테넌트(Tenant)가 동시에 공유하는 개념입니다. 테넌트는 독립된 공간에서 자원과 기능을 분리하여 사용하며, 각 테넌트는 서로에게 영향을 주지 않고 독립적으로 운영됩니다.

Document-Oriented
여러 계층의 데이터를 JSON 형식의 구조화된 문서로 인덱스에 저장할 수 있다. 계층 구조로 문서도 한 번의 쿼리로 쉽게 조회할 수 있다.

역색인(Inverted index)
엘라스틱서치는 루씬 기반의 검색엔진입니다. 따라서 엘라스틱서치 또한 역색인을 지원합니다. 반면 MongoDB, 카산드라 같은 일반적인 NoSQL은 역색인을 지원하지 않습니다.
이는 다른 NoSQL 대비 엘라스틱서치의 매우 큰 장점이라 할 수 있습니다.

역색인이란 종이책의 마지막 페이지에서 제공하는 색인 페이지와 비슷하게 제공되는 특수한 데이터 구조입니다.
해당 단어만 찾으면 단어가 포함된 모든 문서의 위치를 알 수 있기 때문에 빠르게 찾을 수 있습니다.

확장성과 가용성
대량의 문서를 색인한다고 가정할 경우 모든 문서를 색인하는 데 막대한 비용과 시간이 들게 됩니다. 하지만 엘라스틱서치를 분산 구성해서 확장한다면
대량의 문서를 좀 더 효율적으로 처리할 수 있습니다. 분산 환경에서 데이터는 샤드라는 작은 단위로 나뉘어 제공되며 인덱스를 만들 때마다 샤드의 수를 조절할 수 있습니다.
이를 통해 데이터의 종류와 성격에 따라 데이터를 분산해서 빠르게 처리할 수 있습니다.

1.2.2 엘라스틱서치의 약점

첫째, 실시간이 아닙니다. 일반적으로 색인된 데이터는 통상적으로 1초 뒤에나 검색이 가능해집니다. 색인된 데이터는 내부적으로 커밋과 플러시 같응ㄴ 복잡한 과정을 거치기 때문에
실시간이 아닙니다. 엄밀히 따지자면 준 실시간이라고 할 수 있습니다.

둘째, 트랜잭션과 롤백 기능을 제공하지 않습니다. 엘라스틱서치는 기본적으로 분산 시스템으로 구성됩니다. 전체적인 클러스터의 성능 향상을 위해 시스템적으로 비용 소모가 큰
롤백과 트랜잭션을 지원하지 않기 때문에 최악의 경우에 데이터 손실의 위험이 있습니다.

셋째, 데이터의 업데이트를 제공하지 않습니다. 엄밀히 말하자면 엘라스틱서치는 업데이트 명령이 요청될 경우 기존 문서를 삭제하고 변경된 내용으로 새로운 문서를 생성하는 방식을 사용합니다.
이러한 이유로 단순 업데이트에 비해서는 상대적으로 많은 비용이 발생합니다. 하지만 이것은 큰 단점이 아니며 이를 통해 불변적이라는 이점을 취할 수 있습니다.

1.3 실습 환경 구축
엘라스틱서치 노드 하나만으로 구성된 클러스터를 싱글 모드 또는 테스트 모드라고 부릅니다. 
엘라스틱서치로 실제 서비스를 운영할 때는 최소 3개 이상의 물리적인 노드로 클러스터를 구축하는 것이 좋습니다.

1.3.1 엘라스틱서치 설치

자바 설치
엘라스틱서치는 자바로 개발됐기 때문에 실행 시 자바 런타임이 반드시 필요합니다. JRE만 설치해도 무방하지만 JDK를 설치하는 것이 좋습니다. (1.8이상 다운)

엘라스틱서치 설치

1.3.2 키바나 설치





