⭐️ @Override 애너테이션을 일관되게 사용하라

1️⃣ 개요 : @Override는 메서드 선언에만 달 수 있으며, 이 애너테이션이 달렸다는 것은 상위 타입의 메서드를 재정의했음을 뜻한다. 이 애너테이션을 일관되게 사용하면 여러 가지 악명 높은
        버그들을 예방해준다. 다음의 Bigram 프로그램을 살펴보자. 여기서는 영어 알파벳 2개로 구성된 문자열을 표현한다.

        상위 클래스의 메서드를 재정으히ㅏ려는 모든 메서드에 @Overide 에너테이션을 달자. 예외는 한 가지뿐이다. 구체 클래스에서 상위 클래스의 추상 메서드를 재정의할 때는 굳이
        @Override를 달지 않아도 된다. 구체 클래스인데 아직 구현하지 않은 추상 메서드가 남아 있다면 컴파일러가 그 사실을 바로 알려주기 때문이다.

        @Override는 클래스뿐 아니라 인터페이스의 메서드를 재정의할 때도 사용할 수 있다. 디폴트 메서드를 지원하기 시작하면서, 인터페이스 메서드를 구현한 메서드에도 @Override를
        다는 습관을 들이면 시그니처가 올바른지 재차 확신할 수 있다.

        Set 인터페이스는 Collection 인터페이스를 확장했지만 새로 추가한 메서드는 없다. 따라서 모든 메서드 선언에 @Override를 달아 실수로 추가한 메서드가 없음을 보장했다.

📖 핵심 정리 : 재정의한 모든 매서드에 @Override 애너테이션을 의식적으로 달면 실수했을 때 컴파일러가 바로 알려줄 것이다. 예외는 한 가지 뿐이다. 구체 클래스에서 상위 클래스의 추상
            메서드를 재정의한 경우엔 이 애너테이션을 달지 않아도 된다.(단다고 해서 해로울 것도 없다.)
