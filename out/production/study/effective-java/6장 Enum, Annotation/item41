⭐️ 정의하려는 것이 타입이라면 마커 인터페이스를 사용하라

1️⃣ 개요 : 아무 메서드도 담고 있지 않고, 단지 자신을 구현하는 클래스가 특정 속성을 가짐을 표시해주는 인터페이스를 마커 인터페이스라고 한다.
        Serializable 인터페이스가 좋은 예다. Serializable은 자신을 구현한 클래스의 인스턴스는 objectOutputStream을 통해 쓸 수 있다고, 직렬화 할 수 있다고 알려준다.

        마커 애너테이션과 마커 인터페이스

2️⃣ 마커 인터페이스가 마커 애너테이션보다 나은 점 2가지
  1. 컴파일 타임에 오류 검출
    마커 인터페이스는이를 구현한 클래스의 인스턴스들을 구분하는 타입으로 쓸 수 있으나, 마커 애너테이션은 그렇지 않다. 마커 인터페이스는 어엿한 타입이기 때문에, 
    마커 애너테이션을 사용했다면 런타임에야 발견될 오류를 컴파일타임에 잡을 수 있다.
    Serializable 마커 인터페이스를 보고 그 대상이 직렬화할 수 있는 타입인지를 확인한다.
  2. 적용 대상을 더 정밀하게 지정할 수 있다.
    적용 대상(@Target)을 ElementType.TYPE으로 선언한 애너테이션은 모든 타입(클래스, 인터페이스, 열거 타입, 애너테이션)에 달 수 있다. 부착할 수 있는 타입을 더 세밀하게
    제한하지는 못한다는 뜻이다. 
    이 마커를 마커 인터페이스로 정의했다면 그냥 마킹하고 싶은 클래스에만 그 인터페이스를 구현(인터페이스라면 확장)하면 된다. 그러면 타입은 자동으로 그 인터페이스의 하위 타입임이
    보장되는 것이다.

3️⃣ 마커 애너테이션이 마커 인터페이스보다 나은 점
  거대한 애너테이션 시스템의 지원을 받는다. 마커 애너테이션을 적극 활용하는 프레임워크에서는 마커 애너테이션을 쓰는 쪽이 일관성을 지키는 데 유리할 것

4️⃣ 사용 : 클래스와 인터페이스 외의 프로그램 요소(모듈, 패키지, 필드, 지역변수 등)에 마킹해야 할 때 애너테이션을 쓸 수 밖에 없다.
  ❓ 마킹이 된 객체를 매개변수로 받는 메서드를 작성할 일이 있을까? 라고 물어보았을 때, 답이 "그렇다"이면 마커 인터페이스를 써야 한다. 이렇게 하면 그 마커 인터페이스를 해당 메서드의
    매개변수 타입으로 사용하여 컴파일타임에 오류를 잡아낼 수 있다. 이런 메서드를 작성할 일은 절대 없다고 확신한다면 아마도 마커 애너테이션이 나은 선택일 것이다. 추가로, 애너테이션을
    활발히 활용하는 프레임워크에서 사용하려는 마커라면 마커 애너테이션을 사용하는 편이 좋을 것이다.

📖 핵심 정리 : 마커 인터페이스와 마커 애너테이션은 각자의 쓰임이 있다. 새로 추가하는 메서드 없이 단지 타입 정의가 목적이라면 마커 인터페이스를 선택하자. 클래스나 인터페이스 외의 프로그램
            요소에 마킹해야 하거나, 애너테이션을 적극 활용하는 프레임워크의 일부로 그 마커를 편입시키고자 한다면 마커 애너테이션이 올바른 선택이다. 적용 대상이 ElementType.TYPE인
            마커 애너테이션을 작성하고 있다면, 잠시 여유를 갖고 정말 애너테이션으로 구현하는 게 옳은지, 혹은 마커 인터페이스가 낫지는 않을지 곰곰이 생각해보자.

            타입을 정의할 거라면 인터페이스를 쓰라. 타입을 정의할 게 아니라면 인터페이스를 쓰지 말자.
