⭐️ 비트 필드 대신 EnumSet을 사용하라

1️⃣ 개요 : 열거한 값들이 주로 (단독이 아닌) 집합으로 사용되랴 경우, 예전에는 각 상수에 서로 다른 2의 거듭제곱 값을 할당한 정수 열거 패턴ㅇ르 사용해 왔다.

2️⃣ 비트 필드 : text.applyStyles(STYLE_BOLD STYLE_ITLIC); 비트별 OR를 사용해 여러 상수를 하나의 집합으로 모을 수 있으며, 이렇게 만들어진 집합을 비트 필드라 한다.
      장점 : 비트별 연산을 사용해 합집합과 교집합 같은 집합 연산을 효율적으로 수행할 수 있다.
      단점 : 상수의 단점을 그대로 지니며, 비트 필드 값이 그대로 출력되면 단순한 정수 열거 상수를 출력할 때보다 해석하기가 훨씬 어렵다. 비트 필드 하나에 녹아 있는 모든 원소를
            순회하기도 까다롭다. 마짐막으로, 최대 며 비트가 필요한지를 API 작성 시 미리 예측하여 적절한 타입을 선택해야 한다. API를 수정하지 않고는 비트 수 (32 or 64비트)를
            더 늘릴 수 없기 때문이다.

3️⃣ Enum Set : EnumSet 클래스는 열러 타입 상수의 값으로 구성된 집합을 효과적으로 표현해준다. Set 인터페이스를 완벽히 구현하며, 타입 안전하고, 다른 어떤 Set 구현체와도 함께
              사용할 수 있다. 하지만 EnumSet의 내부는 비트 벡터로 구현되었다. 원소가 총 64개 이하라면, 즉 대부분의 경우에 EnumSet전체를 long 변수 하나로 표현하여
              비트 필드에 비견되는 성능을 보여준다. removeAll과 retainAll 같은 대량 작업은 (비트 필드를 사용할 때 쓰는 것과 같은) 비트를 효율적으로 처리할 수 있는 
              산술 연산을 써서 구현했다. 그러면서도 비트를 직접 다룰 때 흔히 겪는 오류들에서 해방된다. 난해한 작업은 EnumSet이 다 처리해주기 때문이다.

              text.applyStyles(EnumSet.of(Style.BOLD, Style.ITALIC);
❓ 왜 EnumSet<Style>으로 받지 않고 Set<Style>로 받은 것일까? : 모든 클라이언트가 EnumSet을 건네리라 짐작되는 상황이라도 이왕이면 인터페이스로 받는 게 일반적으로 좋은 습관이다.

📖 핵심 정리 : 열거할 수 있는 차입을 한데 모아 집합 형태로 사용한다고 해도 비트 필드를 사용할 이유는 없다. EnumSet 클래스가 비트 필드 수준의 명료함과 성능을 제공하고 아이템 34에서
            설명한 열거 타입의 장점까지 선사하기 때문이다. EnumSet의 유일한 단점이라면 (자바 9까지는 아직) 불변 EnumSet을 만들 수 없다는 것이다. 그래도 향수 릴리스에서는
            수정되라라 본다. 그때까지는 (명확성과 성능이 조금 희생되지만) Collctions.unmodifiableSet으로 EnumSet을 감싸 사용할 수 있다.
