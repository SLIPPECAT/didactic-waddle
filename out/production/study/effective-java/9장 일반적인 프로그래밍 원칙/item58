⭐️ 전통적인 for 문보다는 for-each 문을 사용하라

1️⃣ 스트림이 제격인 작업(item45)이 있고 반복이 제격인 작업이 있다.

2️⃣ 전통적인 for 문의 단점 : 반복자와 인덱스 변수는 모두 코드를 지저분하게 만들 뿐이며, 잘못된 변수를 사용했을 때 컴파일러가 잡아주리라는 보장도 없다.
                        컬렉션이냐 배열이냐에 따라 코드 형태가 달라지므로 주의해야할 부분이다.

3️⃣ for-each 문(향상된 for 문) : 반복자와 인덱스 변수를 사용하지 않으니 코드가 깔끔해지고 오류가 날 일도 없다. 하나의 관용구로 컬레겻ㄴ과 배열을 모두 처리할 수 있어서
                            어떤 컨테이너를 다루는지 신경쓰지 않아도 된다. 반복 대상이 컬렉션이든 배열이든 속도는 그대로다.
  ex. for (Element e : elements) { .. // e로 문언가를 한다. .}  ... 여기서 콜론(:)은 "안의(in)"라고 읽으면 된다. 'elements 안의 각 원소 e에 대해'

4️⃣ for-each 문을 사용할 수 없는 세 가지 상황
  1. 파괴적인 필터링
    컬렉션을 순회하면서 선택된 원소를 제거해야 한다면 반복자의 remove 메서드를 호출해야 한다. 
    자바 8부터는 Collection의 removeIf 메서드를 사용해 컬렉션을 명시적으로 순회하는 일을 피할 수 있다.
  2. 변형
    리스트나 배열을 순회하면서 그 원소의 값 일부 혹은 전체를 교체해야 한다면 리스트의 반복자나 배열의 인덱스를 사용해야 한다.
  3. 병렬 반복
    여러 컬렉션을 병렬로 순회해야 한다면 각각의 반복자와 인덱스 변수를 사용해 엄격하고 명시적으로 제어해야 한다.

5️⃣ 작가님의 제안
  for-each 문은 컬렉션과 배열은 물론 Iterable 인터페이스를 구현한 객체라면 무엇이든 순회할 수 있다. Iterable 인터페이스는 다음과 같이 메서드가 단 하나뿐이다.
  Iterable을 처음부터 직접 구현하기는 까다롭지만, 원소들의 묶음을 표현하는 타입을 작성해야 한다면 Iterable을 구현하는 쪽으로 고민해보자.
  해당 타입에서 Collection 인터페이스는 구현하지 않기로 했더라도 말이다.
  Iterable을 구현해두면 그 타입을 사용하는 프로그래머가 for-each 문을 사용할 때마다 감사해할 것이다.

📖 핵심 정리 : 전통적인 for 문과 비교했을 때 for-each 문은 명료하고, 유연하고, 버그를 예방해준다. 성능 저하도 없다. 가능한 모든 곳에서 for 문이 아닌 for-each문을 사용하자.
