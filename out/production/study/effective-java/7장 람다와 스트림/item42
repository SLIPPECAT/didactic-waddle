⭐️ 익명 클래스보다는 람다를 사용하라

1️⃣ 개요 : 예전에는 자바에서 함수 타입을 표현할 때 추상 메서드를 하나만 담은 인터페이스(드물게는 추상 클래스)를 사용했다. 이런 인터페이스의 인스턴스를 함수 객체라고 하여, 특정 함수나
        동작을 나타내는 데 섰다. 1997년 JDK 1.1이 등장하면서 함수 객체를 만드는 주요 수단은 익명 클래스가 되었다. 

        자바 8에 와서 추상 메서드 하나짜리 인터페이스 -> 함수형 인터페이스라 부르는 안터페이스들의 인스턴스를 람다식을 사용해 만들 수 있게 되었다.
        람다는 함수나 익명 클래스와 개념은 비슷하지만 코드는 훨씬 간결하다.

        타입을 명시해아 코드가 더 명확할 때만 제외하고는, 람다의 모든 매개변수 타입은 생략하자.
        컴파일러가 타입을 추론하는 데 필요한 타입 정보 대부분을 제네릭에서 얻는다. 우리가 이 정보를 제공하지 않으면 컴파일러는 람다의 타입을 추론할 수 없게 되고, 결국 우리가
        일일이 명시해야 한다.

        람다 자리에 비교자 생성 메서드를 사용하면 이 코드를 더 간결하게 만들 수 있다.
        Collections.sort(words, comparingInt(String::length));

        메서드나 클래스와 달리, 람다는 이름이 없고 문서화도 못 한다. 따라서 코드 자체로 동작이 명확히 설명되지 않거나 코드 줄 수가 많아지면 람다를 쓰지 말아야 한다.
        람다는 한 줄일 때 가장 좋고 길어야 세 줄 안에 끝내는 게 좋다. 

        람다로 인해 익명 클래스가 설 자리가 크게 좁아진 게 사실이다. 하지만 람다로 대체할 수 없는 곳이 있다.

2️⃣ 람다로 대체할 수 없는 곳
  1. 람다는 함수형 인터페이스에서만 쓰인다. 추상 클래스의 인스턴스를 만들 때 람다를 쓸 수 없으니, 익명 클래스를 써야 한다.
  2. 비슷하게 추상 메서드가 여러 개인 인터페이스의 인스턴스를 만들 때도 익명 클래스를 쓸 수 있다. 
  3. 람다는 자신을 참조할 수 없다. 람다에서의 this 키워드는 바깥 인스턴스를 가리킨다. 반면 익명클래스에서 this는 익명 클래스의 인스턴스 자신을 가리킨다.
    그래서 함수 객체가 자신을 참조해야 한다면 반드시 익명 클래스를 써야 한다.

3️⃣ 직렬화를 하지 말아야 한다.
  람다도 익명 클래스처럼 직렬화 형태가 구현별로 다를 수 있다. 따라서 람다를 직렬화하는 일은 극히 삼가야 한다. (익명 클래스의 인스턴스도 마찬가지)
  직렬화해야 하는 함수 객체가 있다면 (가령 Comparator처럼) private 정적 중첩 클래스의 인스턴스를 사용하자.

📖 핵심 정리 : 자바가 8로 판올림되면서 작은 함수 객체를 구현하는데 적합한 람다가 도입되었다. 익명 클래스는 (함수형 인터페이스가 아닌) 타입의 인스턴스를 만들 때만 사용하라.
            람다는 작은 함수 객체를 아주 쉽게 표현할 수 있어 (이전 자바에서는 실용적이지 않던) 함수형 프로그래밍의 지평을 열었다.
