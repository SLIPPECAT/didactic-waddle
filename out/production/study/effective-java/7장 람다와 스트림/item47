⭐️ 반환 타입으로는 스트림보다 컬렉션이 낫다.

1️⃣ 개요: 원소 시퀀스, 즉 일련의 원소를 반환하는 메서드는 수없이 많다. 자바 7까지는 이런 메서드의 반환 타입으로 
        Collection, Set, List 같은 컬렉션 인터베이스, 혹은 Iterabled이나 배열을 썼다. 
        
        기본은 컬렉션 인터페이스
        Iterable 인터페이스
        배열 : 반환 원소들이 기본 타입이거나 성능에 민감한 상황일 경우

        원소 시퀀스를 반환할 때는 스트림을 사용해야 한다고 하지만, 스트림은 반복을 지원하지 않는다. 
        어댑터를 사용하면 어떤 스트림도 for-each 문으로 반복할 수 있다.

        스트림 버전은 사전을 읽을 때, Files.lines 메서드를 이용했고, 반복 버전은 스캐너를 이용했다.

        Collection 인터페이스는 Iterable의 하위 타입이고 stream 메서드도 제공하니 반복과 스트림을 동시에 지원한다. 따라서 원소 시퀀스를 반환하는 공개 API의 반환 타입에는
        Collection이나 그 하위 타입을 쓰는 게 일반적으로 최선이다. Arrays 역시 Arrays.asList의 Stream.of 메서드로 손쉽게 반복과 스트림을 지원할 수 있다.
        반환하는 시퀀스의 크기가 메모리에 올려도 안전할 만큼 작다면 ArraysList나 HashSet 같은 표준 컬렉션 구현체를 반환하는 게 최선일 수 있따. 하지만 단지 컬렉션을 반환한다는
        이유로 덩치 큰 시퀀스를 메모리에 올려서는 안된다.

        ex. 주어진 멱집합 (한 집합의 모든 부분집합을 원소로 하는 집합)을 반환하는 상황이다. 원소 n개의 멱집합의 원소 개수는 2n개가 된다. 그러니 멱집합을 표준 컬렉션 구현체에
        저장하려는 생각은 위험하다. 하지만 AbstractList를 이용하면 훌륭한 전용 컬렉션을 손쉽게 구현할 수 있다.
        비결은 멱집합을 구성하는 각 원소의 인덱스를 비트 벡터로 사용하는 것이다. 인덱스의 n번째 비트 값은 멱집합의 해당 원소가 원래 집합의 n번째 원소를 포함하는지 여부를 알려준다.
        따라서 0부터 2^n -1까지의 이진수와 원소 n개인 집합의 멱집합과 자연스럽게 매핑된다.

        AbstractCollection을 활용해서 Collection 구현체를 작성할 때는 Iterable용 메서드 외에 2개만 더 구현하면 된다. contains와 size다.
        conatins와 size를 구현하는 게 불가능할 때는 컬렉션보다는 스트림이나 Iterable을 반환하는 편이 낫다. 원한다면 별도의 메서드를 두어 두 방식을 모두 제공해도 된다.


📖 핵심 정리 : 원소 시퀀스를 반환하는 메서드를 작성할 때는, 이를 스트림으로 처리하기를 원하는 사용자와 반복으로 처리하길 원하는 사용자가 모두 있을 수 있음을 떠올리고, 양쪽을 모두
            있음을 떠올리고, 양쪽을 모두 만족시키려 노력하자. 컬렉션을 반환할 수 있다면 그렇게 하라. 반환 전부터 이미 원소들을 컬렉션에 담아 관리하고 있거나 컬렉션을 하나 더 
            만들어도 될 정도로 원소 개수가 적다면 ArrayList 같은 표준 컬렉션에 담아 반환하라. 그렇지 않으면 앞서의 멱집합 예처럼 전용 컬렉션을 구현할지 고민하라.
            커렉션을 반환하는 게 불가능하면 스트림과 Iterable 중 더 자연스러운 것을 반환하라. 만약 나중에 Stream 인터페이스가 Iterable을 지원하도록 자바가 수정된다면,
            그때는 안심하고 스트림을 반환하면 될 것이다. (스트림 처리와 반복 모두에 사용할 수 있으니.)

