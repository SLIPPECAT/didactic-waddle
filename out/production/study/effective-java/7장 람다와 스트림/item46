⭐️ 스트림에는 부작용 없는 함수를 사용하라.

1️⃣ 개요 : 스트림은 그저 또 하나의 API가 아닌, 함수형 프로그래밍에 기초한 패러다임이기 때문이다. 스트림이 제공하는 표현력, 속도, (상황에 따라서는)
        병렬성을 얻으려면 API는 말할 것도 없고 이 패라디임까지 함께 받아들여야 한다.

        스트림 패러다임의 핵심은 계산을 일련의 변환으로 재구성하는 부분이다. 이때 각 변환 단계는 가능한 한 이전 단계의 결과를 받아 처리하는 순수 함수여야 한다.
        순수 함수란 : 오직 입력만이 결과에 영향을 주는 함수를 말한다. 다른 가변 상태를 참조하지 않고, 함수 스스로도 다른 상태를 변경하지 않는다. 이렇게 하려면
        (중가나 단계든 종단 단계든) 스트림 연산에 건네는 함수 객체는 모두 부작용이 없어야 한다.

        ex. 텍스트 파일에서 단어별 수를 세어 빈도표로 만드는 일 
        forEach 연산은 종단 연산 중 기능이 가장 적고 가장 '덜' 스트림답다. 대놓고 반복적이라서 병렬화할 수도 없다.
        forEach 연산은 스트림 계산 결과를 보고할 때만 사용하고, 계산하는 데는 쓰지 말자. 물론 가끔은 스트림 계산 결과를 기존 컬렉션에 추가하는 등의 다른 용도로도 쓸 수 있다.

        스트립을 사용하려면 수집기(collector)는 꼭 배워야 하는 개념이다.
        java.util.stream.Collectors 클래스는 메서드를 무려 39개나 가지고 있고, 그중에는 타입 매개변수가 5개나 되는 것도 있다. 
        익숙해지기 전까지는 축소(reduction) 전략을 캡슐화한 블랙박스 객체라고 생각하자. 여기서 축소는 스트림의 원소들을 객체 하나에 취합한다는 뜻이다.
        수집기가 생성하는 객체는 일반적으로 컬렉션이며, 그래서 collector라는 이름을 쓴다.

        수집기를 사용하면 스트림의 원소를 손쉽게 컬렉션으로 모을 수 있다.
        수집기는 총 세 가지로, toList(), toSet(), toCollection(collectionFactory)가 그 주인공이다.
        이들은 차례로 리스트, 집합, 프로그래머가 지정한 컬렉션 타입을 반환한다.

        비교자 : comparing(freq::get).reversed, 키 추출 함수로 쓰인 freq::get, 역순으로 정렬하는 reversed, sorted
        ✔️ tokens는 자바 9부터 지원하므로, 이전 버전을 쓰는 사람은 어댑터를 시용하여 Iterator를 구현한 Scanner를 스트림으로 변환할 수 있다. cf. streamOf(Iterable<E>)

        스트림의 각 원소는 키 하나와 값 하나에 연관되어 있따. 그리고 다수의 스트림 원소가 같은 키에 연관될 수 있다.

2️⃣ Collectors가 제공하는 메드
        toMap
        gorupingBy : 입력으로 분류 함수(classifier)를 받고 출력으로 원소들을 카테고리별로 모아 놓은 맵을 담은 수집기를 반환한다.
        분류 함수는 입력 받은 원소가 속하는 카테고리를 반환한다. 그리고 이 카테고리가 해당 원소의 맵 키로 쓰인다.
        다중정의된 groupingBy 중 형태가 가장 간단한 것은 분류 함수 하나를 인수로 받아 맵을 반황ㄴ한다. 반환된 맵에 담긴 각각의 값은 해당 카테고리에 속하는 원소들을 모두 담은
        리스트다. 이는 아이템 45의 아나그램 프로그램에서 사용한 바로 그 수집기로 알파벳화한 단어를 알파벳화 결과가 같은 단어들의 리스트로 매핑하는 맵을 생성했다.

        groupingBy가 반환하는 수집기가 리스트 외의 값을 갖는 맵을 생성하게 하려면, 분류 함수와 함께 다운스트림 수집기도 명시해야 한다. 다운 스트림 수집기의 역할은 해당 카테고리의
        모든 원소를 담은 스트림으로부터 값을 생성하는 일이다. 이 매개변수를 사용하는 가장 간단한 방법은 toSet()을 넘기는 것이다. 그러면 groupingBy는 원소들의 리스트가 아닌 집합(Set)을
        값으로 갖는 맵을 만들어낸다.

        joining : CharSequence 인스턴스의 스트림에만 적용할 수 있다. 이 중 매개변수가 없는 joining은 단순히 원소들을 연결하는 수집기를 반환한다.

📖 핵심 정리 : 스트림 파이프라인 프로그래밍의 핵심은 부작용 없는 함수 객체에 있다. 스트림뿐 아니라 스트림 관련 객체에 건네지는 모든 함수 객체가 부작용이 없어야 한다.
                종단 연산 중 forEach는 스트림이 수행한 계산 결과를 보고할 때만 이용해야 한다. 계산 자체에는 이용하지 말자. 스트림을 올바로 사용하려면 수집기를 잘 알아둬야 한다.
                가장 중요한 수집기 팩터리는 toList, toSet, toMap, groupingBy, joining이다.
                
