⭐️ 스트림 병렬화는 주의해서 적용하라

☕️ 동시성 프래그래밍 측면에서 자바
  - 처음 릴리스된 1996년부터 스레드, 동기화, wait/nofity를 지원
  - 자바 5 :  동시성 컬렉션인 java.util.concurrent 라이브러리와 실행자(Executor) 프레임워크를 지원
  - 자바 7 : 고성능 병렬 분해(pararrel decom-position)프레임워크인 포크-조인(fork-join) 패키지를 추가
  - 자바 8 : parallel 메서드만 한 번 호출하면 파이프라인을 병렬 실행할 수 있는 스트림을 지원

1️⃣ 개요 : 자바로 동시성 프로그램을 작성하기가 점점 쉬워지고 있지만 이를 올바르고 빠르게 작성하는 일은 어려운 작업이다.
        동시성 프로그래밍을 할 때는 안정성(safety)과 응답 가능(liveness) 상태를 유지하기 위해 애써야 하는데, 병렬 스트림 파이프라인 프로그래밍에서도 다를 바 업삳.

        환경이 아무리 좋더라도 데이터 소스가 Stream.iterate거나 중간 연산으로 limit를 쓰면 파이프라인 병렬화로는 성능 개선을 기대할 수 없다.
        스트림 파이프라인을 마구잡이로 병렬화하면 안 된다. 성능이 끔찍하게 나빠질 수 있다.

2️⃣ 병렬화의 효과가 좋은 경우
  - 스트림의 소스가 ArrayList, HashMap, HashSet, ConcurrentHashMap의 인스턴스거나 배열, int 범위, long 범위일 때 병렬화 효과가 가장 좋다.
  - 이 자료구조들은 모두 데이터를 원하는 크기로 정확하고 손쉽게 나눌 수 있어서 일을 다수의 스레드에 분해하기에 좋다는 특징이 있다.
  - 나누는 작업은 Spliterator가 담당하며, Spliterator 객체는 Stram이나 Iterable의 spliterator 메서드로 얻을 수 있다.
  - 이 자료구조은 원소들을 순차적으로 실행할 때 참조 지역성(locality of reference)이 뛰어나다는 것이다. 이웃한 메모리의 참조들이 메뫼에 연속해서 저장되어 있다는 뜻
  - 참조 지역성이 가장 뛰어난 자료구조는 기본 타입의 배열이다. 기본 타입 배열에서는 데이터 자체가 메모리에 연속해서 저장되기 때문이다.

3️⃣ 병렬 수행 효율에 영향을 주는 요인2
  - 스트림 파이프라인의 종단 연산의 동작 방식
  - 종단 연산 중 병렬화에 가장 적합한 것은 축소다.
  - 축소는 파이프라인에서 만들어진 모든 원소를 하나로 합치는 작업
  - Stream의 reduce 메서드 중 하나, 혹은 min, max, count, sum 같이 완성된 형태로 제공되는 메서드 중 하나를 선택해 수행한다.
  - anyMatch, allMatch, noneMatch처럼 조건에 맞으면 바로 반환되는 메서드도 병렬화에 적합하다.
  - 반면, 가변 축소를 수행하는 Stream의 collect 메서든는 병렬화에 적합하지 않다. 컬렉션들을 합치는 부담이 크기 때문이다.

  - 직접 구현한 Stream, Iterable, Collection이 병렬화의 이점을 제대로 누리게 하고 싶다면 spliterator 메서드를 반드시 재정의 하고 결과 스트림의 병렬화 성능을 강도 높게 테스트하기

  스트림을 잘못 병렬화하면 (응답 불가를 포함해) 성능이 나빠질 뿐만 아니라 결과 자체가 잘못되거나 예상 못한 동작이 발생할 수 있다.
  
  스트림 병렬화는 오직 성능 최적화를 위한 수단임을 기억하자.

  조건이 잘 갖춰지면 parallel 메서드 호출 하나로 거의 프로세서 코어 수에 비례하는 성능 향상을 만끽할 수 있다. 머신러닝과 데이터 처리 같은 특정 분야에서는 이 성능 개선의 유혹을
  뿌리치기 어려울 것이다.

  무작위 수들로 이뤄진 스트림을 병렬화하려거든 ThreadLocalRandom(혹은 구식인 Random)보다는 Splittable Random 인스턴스를 이용하자. Splittable Random은 정확이 이럴 때 
  쓰고자 설계된 것이라 병렬화하면 성능이 선형으로 증가한다.

📖 핵심 정리 : 계산도 올바로 수행하고 성능도 빨라질 거라는 확신 없이는 스트림 파이프라인 병렬화는 시도조차 하지 말라. 스트림을 잘못 병렬화하면 프로그램을 오동작하게 하거나 성능을 급격히
            떨어뜨린다. 병렬화하는 편이 낫다고 믿더라도, 수정 후의 코드가 여전히 정확한지 확인하고 운영 환경과 유사한 조건에서 수행해보며 성능지표를 유심히 관찰하라. 그래서 계산도
            정확하고 성능도 좋아졌음이 확실해졌을 때, 오직 그럴 때만 병렬화 버전 코드를 운영 코드에 반영하라
