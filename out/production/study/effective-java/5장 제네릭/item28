⭐️ 배열보다는 리스트를 사용하라.

배열과 제네릭 타입에는 중요한 차이가 두 가지가 있다.
1. 배열은 공번(convariant)이다. 어려워 보이는 단어지만 뜻은 간단하다.
Sub가 Super의 하위 타입이라면 배열 Sub[]는 배열 Super[]의 하위 타입이 된다.(공변, 즉 함께 한다는 뜻이다.)
반면, 제네릭은 불공변(invariant)이다. 즉 서로 다른 타입 Type1과 Type2가 있을 때, List<Type1>은 List<Type2>의 하위 타입도 아니고 상위 타입도 아니다.
이것만 보면 제네릭에 문제가 있을 수 있다고 생각할 수도 있지만, 사실 문제가 있는 건 배열 쪽이다.
배열에서는 실수를 런타임에서야 알게 되지만, 리스트를 사용하면 컴파일할 때 바로 알 수 있다.

2. 배열은 실체화(reify)된다. 배열은 런타임에도 자신을 담기로 한 원소의 타입을 인지하고 확인한다.

제네릭 배열을 만들지 못하게 막은 이유는 무엇일까?
타입이 안전하지 않기 때문이다. 이를 허용한다면 컴파일러가 자동 생성한 형변환 코드에서 런타임에 ClassCastExeption이 발생할 수 있다.

E, List<E>, List<String> 같은 타입을 실체화 불가 타입(none-reifiable type)이라 한다. 쉽게 말해, 실체화되지 않아서 런타임에는 컴파일타임보다 타입 정보를 적게 가지는 타입이다.
소거 메커니즘 때문에 매개변수화 타입 가운데 실체화될 수 있는 타입은 List<?>와 Map<?,?>같은 비한정적 와일드카드 타입뿐이다. 배열을 비한정적 와일드카드 타입으로 만들 수 있지만 융요하게 쓰일 일은 거의 없다.

제네릭에서는 원소의 타입 정보가 소거되어 런타임에는 무슨 타입인지 알 수 없음을 기억하자!
코드를 작성하는 사람이 안전하다고 확신한다면 주석을 남기고 애너테이션을 달아 경고를 숨겨도 된다. 하지만 애체오 경고의 원인을 제거하는 편이 낫다.

비검사 형변환 경고를 제거하려면 배열 대신 리스트를 쓰면 된다.

이렇게 하면 코드양이 조금 늘고, 아마도 조금 더 느릴 테지만, 런타임에 ClassCastException을 만날 일은 없으니 그만한 가치가 있다.

핵심 정리
배열과 제네릭에는 매우 다른 타입 규칙이 적용된다. 배열은 공변이고 실체화되는 반면, 제네릭은 불공변이고 타입 정보가 소거된다.
그 결과 배열은 런타임에는 타입 안전하지만 컴파일타임에는 그렇지 않다. 제네릭은 반대다. 그래서 둘을 섞어 쓰기란 쉽지 않다.
둘을 섞어 쓰다가 컴파일 오류나 경고를 만나면, 가장 먼저 배열을 리스트로 대체하는 방법을 적용해보자.
