⭐️ 인터페이스는 타입을 정의하는 용도로만 사용하라

인터페이스는 자신을 구현한 클래스의 인스턴스를 참조할 수 있는 타입 역할을 한다.
달리 말해, 클래스가 어떤 인터페이스를 구현한다는 것은 자신의 인스턴스로 무엇을 할 수 있는지를 클라이언트에 얘기해주는 것이다.
인터페이스는 오직 해당 용도로만 사용해야 한다.

❗️ 안티패턴 : 상수 인터페이스
상수 인터페이스란? 메서드 없이 상수를 뜻하는 static fianl 필드로만 가득 찬 인터페이스
상수들을 사용하려는 클래스에서는 정규화된 이름을 쓰는 걸 피하고자 그 인터페이스를 구현하곤 한다.

클래스 내부에서 사용하는 상수는 외부 인터페이스가 아니라 내부 구현에 해당한다. 따라서 상수 인터페이스를 구현하는 것은 이 내부 구현을 클래스의 API로 노출하는 행위다.
클래스가 어떤 상수 인터페이스를 사용하든 사용자에게 아무런 의미가 없다.

혼란을 줄 수 있으며 오히려 클라이언트 코드가 내부 구현에 해당하는 상수들에 종속되게 한다.

🧐 상수를 공개할 목적이라면 더 합당한 선택지가 몇 가지 있다. 특정 클래스나 인터페이스와 강하게 연관된 상수라면 그 클래스나 인터페이스 자체에 추가해야 한다.
모든 숫자 기본 타입의 박싱 클래스가 대표적으로, Integer와 Double에 선언된 MIN_VALUE, MAX_VALUE 상수
열거 타입으로 나타내기 적합한 상수라면 열거 타입으로 만들어 공개하면 된다.
그것도 아니라면, 인스턴스화 할 수 없는 유틸리티 클래스에 담아 공개하자

유틸리티 클래스에 정의된 상수를 클라이언트에서 사용하려면 클래스 이름까지 함께 명시해야 한다.
PhyscialConstatns.AVOGADROS_NUMBER처럼 말이다. 유틸리티 클래스를 클래스의 상수를 빈번히 사용한다면 정적 임포트 하여 클래스 이름을 생략할 수 있다.

