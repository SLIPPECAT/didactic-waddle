equals는 일반 규약을 재정의하라

그대로 둬도 된다.

1. 각 인스턴스가 본질적으로 고유하다.
2. 인스턴스의 논리적 동치성을 검사할 일이 없다.
3. 상위 클래스에서 재정의한 equals가 하위 클래스에도 딱 들어맞는다.
4. 클래스가 private이거나 package-private이고 equals 메서드를 호출할 일이 없다.

그렇다면 equals를 재정의해야 할 때는?
객체 식별성(두 객체가 물리적으로 같은가)이 아니라 논리적 동치성을 확인해야 하는데, 상위 클래스의 equals가 논리적 동치성을 비교하도록 재정의되지 않았을 때다.
주로 값 클래스들이 여기 해당한다.
값 클래스란 Integer와 String처럼 값을 표현하는 클래스를 말한다.
값이 같은지를 알고 싶어 할 것이다.
equals가 논리적 동치성을 확인하도록 재정의해두면, 그 인스턴스는 값을 비교하길 원하는 프로그래머의 기대에 부응함은 물론 Map키와 Set원소로 사용할 수 있게 된다.
Enum도 여기에 해당한다. 

equals 메서드를 재정의할 때는 반드시 일반 규약을 따라야 한다. 다음은 Object 명세에 적힌 규약이다.

equals 메서드는 동치관계를 구현하며, 다음을 만족한다.

반사성: null이 아닌 모든 참조 값, x에 대해 x.equals(x)는 true다.
대칭성: null이 아닌 모든 참조 값, x, y에 대해 x.equals(y)가 true면 y.equals(x)도 true.
추이성: null이 아닌 모든 참조 값, x, y, z에 대해 x.equals(y)가 true이고 y.equals(z)도 True면, x.equasl(z)도 true다.
일관성: null이 아닌 모든 참조 값, x, y에 대해 x.equals(y)를 반복해서 호출하면 항상 true를 반환하거나 항상 false를 반환한다.
null-아님: null이 아닌 모든 참조 값, x에 대해 x.equasl(null)은 false다.

구체 클래스를 확장해 새로운 값을 추가하면서 eequals 규약을 만족시킬 방법은 존재하지 않는다. 객체 지향적 추상화의 이점을 포기하지 않는 한은 말이다.
이 말은 얼핏, equals 안의 instanceof 검사를 getClass 검사로 바꾸면 규약도 지키고 값도 추가하면서 구체 클래스를 상속할 수 있다는 뜻으로 들린다.

구체 클래스의 하위 클래스에서 값을 추가할 방법은 없지만 괜찮은 우회 방법이 하나 있다. '상속 대신 컴포지션을 사용하라'

명시적 null 검사는 필요하지 않다.
동치성을 검사하려면 equals는 건네받은 객체를 적절히 형변환한 후 필수 필드들의 값을 알아내야 한다.
그러려면 형변환에 앞서 instanceof 연산자로 입력 매개변수가 올바른 타입인지 검사해야 한다.

묵시적 null 검사가 낫다.

instanceof는 첫 번째 피연산자가 null이면 false를 반환하기 때문에 null 검사를 명시적으로 하지 않아도 된다.

<양질의 equals 메서드 구현 방법>
1. == 연산자를 사용해 입력이 자기 자신의 참조인지 확인한다. 자기 자신이면 true 반환.
2. instanceof 연산자로 입력이 올바른 타입인지 확인한다. 그렇지 않다면 false 반환
3. 입력을 올바른 타입으로 형변환한다.
4. 입력 객체와 자기 자신의 대응되는 '핵심' 필드들이 모두 일치하는지 하나씩 검사한다. 모든 필드가 일치하면 true, 하나라도 다르면 false를 반환한다.

float와 double 제외한 기본 타입 필드는 == 연산자로 비교하고, 참조 타입 필드는 각각의 equals 메서드로, float와 double 필드는 각각 정적 메서드인 Float.compare(float, float)와 Double.compare(double, double)로 비교한다.

equals를 다 구현했다면 세 가지만 자문해보자 대칭적인가? 추이성이 있는가? 일관적인가?

<주의사항>
1. equals를 재정의할 땐 hashCode도 반드시 재정의하자
2. 너무 복잡하게 해결하려 들지 말자
3. Object 외의 타입을 매개변수로 받는 equals 메서드는 선언하지 말자.

equals(hashCode도 마찬가지)를 작성하고 테스트하는 일은 지루하고 이를 테스트하는 코드도 항상 뻔하다. 다행이 이 작업을 대신해줄 오픈소스가 있으니 구굴이 만든 AutoValue 프레임워크다.
클래스에 에너테이션 하나만 추가하면 AutoValue가 이 메서드들을 알아서 작성해준다.

핵심 정리
꼭 필요한 경우가 아니면 equals를 재정의하지 말자. 많은 경우에 Object의 equals가 비교를 정확히 수행해준다.
재정의해야 할 때는 그 클래스의 핵심 필드 모두를 빠짐없이, 다섯 가지 규약을 확실히 지켜가며 비교해야 한다.
