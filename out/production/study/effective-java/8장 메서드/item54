⭐️ null이 아닌, 빈 컬렉션이나 빈 배열을 반환하라

1️⃣ 개요 : 컬렉션이 비어있을 경우 null을 반환하는 메서드는 따라해서는 안된다.

컬렉션이나 배열 같은 컨테이너가 비었을 때 null을 반홚하는 메서드를 사용할 때면 방어 코드를 넣어줘야 한다. -> 오류 방지
null을 반환하려면 반환하는 쪽에서도 이 상황을 특급 취급해줘야 해서 코드가 더 복잡해진다.

2️⃣ 빈 컨테이너를 할당하는 데도 비용이 드니 null을 반환하는 쪽이 낫다는 주장
  틀린이유 1. 성능 분석 결과 이 할당이 성능 저하의 주범이라고 확인되지 않는 한 이 정도의 성능 차이는 신경쓸 수준이 못 된다.
  틀린이유 2. 빈 컬렉션과 배열은 굳이 새로 할당하지 않고도 반환할 수 있다.

  ❓ 사용 패턴에 따라 빈 컬렉션 할당이 성능을 눈에 띄게 떨어 드릴 수 있다. 이 때의 해법은 무엇일까?
    -> 매번 똑같은 빈 '불변' 컬렉션을 반환하면 된다. ex. Collections.emptyList() (또는 emptySet, emptyMap)
    -> 최적화에 해당하니 꼭 필요할 때만 사용하고, 수정 전과 후의 성능을 측정하여 실제로 성능이 개선되는지 꼭 확인하자

3️⃣ 배열을 쓸 때에도 null을 반환하지 않고 길이가 0인 배열을 반환하기
  꼭 길이가 0이 아니더라도 단순히 정확한 길이의 배열을 반환하기만 하면 된다.
  이 방식이 성능을 떨어뜨릴 것 같다면 길이 0짜리 배열을 미리 선언해두고 매번 그 배열을 반환하면 된다. (길이 0인 배열은 모두 불변)

  예시)
  private static final Cheese[] EMPTY_CHEESE_ARRAY = new Cheese[0];

  public Cheese[] getCheese() {
    return cheesesInStock.toArray(EMPTY_CHEESE_ARRAY);
  }

  ❗️ 단순 넝능 개선이 목저기람녀 toArray에 넘기는 배열을 미리 할당하는 건 추천되지 않는다. 오히려 성능이 떨어졌다는 연구 결과도 있다.

📖 핵심 정리 : null이 아닌, 빈 배열이나 컬렉션을 반환하라. null을 반환하는 API는 사용하기 어렵고 오류 처리 코드도 늘어난다. 그렇다고 성능이 좋은 것도 안니다.

  
