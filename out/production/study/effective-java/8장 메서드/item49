⭐️ 매개변수가 유효한지 검사하라

1️⃣ 개요 : 메서드와 생성자 대부분은 입력 매개변수의 값이 특정 조건을 만족하기를 바란다.
        메서드 몸체가 실행되기 전에 매개변수를 확인한다면 잘못된 값이 넘어왔을 때 즉각적이고 깔끔한 방식으로 예외를 던질 수 있다.

2️⃣ 매개변수 검사를 제대로 하지 못하면 생기는 문제점
  1. 메서드가 수행되는 중간에 모호한 예외를 던지며 실패할 수 있다. -> 매개변수 검사에 실패하면 실패 원자성을 어기는 결과를 낳을 수 있다.

  public과 proteced 메서드는 매개변수 값이 잘못됐을 때 던지는 예외를 문서화해야 한다.(@throws 자바독 태그를 사용)
  매개변수의 제약을 문서화한다면 그 제약을 어겼을 때 발생하는 예외도 함께 기술해야 한다. 이런 간단한 방법으로 API 사용자가 제약을 지킬 가능성을 크게 높일 수 있다.

  클래스 수준 주석은 그 클래스의 모든 public 메서드에 적용되므로 각 메서드에 일일이 기술하는 것보다 훨씬 깔끔한 방법이다.
  @Nullable이나 이와 비슷한 애너테이션을 사용해 특정 매개변수는 null이 될 수 있다고 알려줄 수도 있지만, 표준적인 방법은 아니다.

  자바 7에 추가된 java.util.Objects.requireNonNull 메서드는 유연하고 사용하기도 편하니, 더 이상 null 검사를 수동으로 하지 않아도 된다.
  원하는 예외 메시지도 지정할 수 있고 입력을 그대로 반환하므로 값을 사용하는 동시에 null 검사를 수행할 수 있다.

  자바 9에서는 Objects에 범위 검사 기능도 더해졌다. ex. checkFromIndexSize, checkFromToIndex, checkIndex

  생성자 매개변수의 유효성 검사는 클래스 불변식을 어기는 객체가 만들어지지 않게 하는 데 꼭 필요하다.

  메서드 몸체 실행 전에 매개변수 유효성을 검사해야 한다는 규칙에도 예외는 있다. 유효성 검사 비용이 지나치게 높거나 실용적이지 않을 때, 혹은 계산 과정에서 암묵적으로 검사가 수행될 때다.

  "매개변수에 제약을 두는 게 좋다" 해석해서는 안 된다. 사실은 그 반대다. 메서드는 최대한 범용적으로 설계해야 한다. 메서드가 건네 받은 값으로 무언가 제대로 된 일을 할 수 있다면
  매개변수 제액은 적을수록 좋다. 하지만 구현하려느 개념 자체가 특정한 제약을 내재한 경우도 드물지 않다.

📖 핵심 정리 : 메서드나 생성자를 작성할 때면 그 매개변수들에 어떤 제약이 있을지 생각해야 한다. 그 제약들을 문서화하고 메서드 코드 시작 부분에서 명식저으로 검새해야 한다.
            그 노력은 유효성 검사가 실제 오류를 처음 걸러낼 때 충분히 보상받을 것이다.
