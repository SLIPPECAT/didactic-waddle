/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if (nums == null || nums.length == 0)
            return null;
            
        return constructBST(nums, 0, nums.length -1);
    }

    private TreeNode constructBST(int[]nums, int start, int end){
        if (start > end)
            return null;
        
        int mid = start + (end - start) / 2;

        TreeNode root = new TreeNode(nums[mid]);

        root.left = constructBST(nums, start, mid -1);
        root.right = constructBST(nums, mid+1, end);

        return root;
    }
}

1. TreeNode를 생성하는 방법에 대해 인지하고 있어야 한다. mid값을 넣어서 TreeNode root를 생성할 수 있다.
2. 이후 재귀함수를 이용해서 root.left 부분을 생성, root.right 부분을 생성한 이후 root 값을 반환한다.

Point: 하위 트리로의 분할과 재귀함수 호출!
