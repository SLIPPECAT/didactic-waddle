시간 복잡도 O(n2)
class Solution {
    public int singleNumber(int[] nums) {

        int result = 0;

        for(int i = 0; i < nums.length; i++){
            for(int j = i+1; j < nums.length; j++)
            if(nums[i] == nums[j]){
                nums[i] = 0;
                nums[j] = 0;

            }
        }
        
        for(int k=0; k < nums.length; k++){
            if(nums[k] != 0){
                result = nums[k];
            }
        }

        return result;
    }
}

시간 복잡도 O(n)
class Solution {
    public int singleNumber(int[] nums) {
        int result = 0;
        
        for (int num : nums) {
            result ^= num; // XOR 연산 적용
        }
        
        return result;
    }
}

여기서 사용되는 것은 비트 연산자인 XOR(^)입니다. XOR 연산은 두 비트가 서로 다를 때 1을 반환하고, 같을 때는 0을 반환합니다.
singleNumber 함수는 배열 nums를 받아서 XOR 연산을 사용하여 한 번만 나타나는 요소를 찾습니다. 초기 result 변수는 0으로 설정되고, 배열의 모든 요소를 순회하면서 result와 해당 요소를 XOR 연산합니다. XOR 연산을 통해 중복되는 요소는 상쇄되고, 최종적으로는 한 번만 나타나는 요소만이 result에 남게 됩니다.
